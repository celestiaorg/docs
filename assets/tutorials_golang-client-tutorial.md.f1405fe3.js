import{_ as n,o as a,c as l,O as o}from"./chunks/framework.6b456e69.js";const F=JSON.parse('{"title":"Golang client library tutorial","description":"","frontmatter":{"head":[["meta",{"property":"og:title","content":"Golang client library tutorial | Celestia Docs"}],["meta",{"property":"og:description","content":"The first modular blockchain network."}]]},"headers":[],"relativePath":"tutorials/golang-client-tutorial.md","filePath":"tutorials/golang-client-tutorial.md","lastUpdated":1761775855000}'),p={name:"tutorials/golang-client-tutorial.md"};function e(t,s,c,r,E,y){return a(),l("div",null,s[0]||(s[0]=[o(`<h1 id="golang-client-library-tutorial" tabindex="-1">Golang client library tutorial <a class="header-anchor" href="#golang-client-library-tutorial" aria-label="Permalink to &quot;Golang client library tutorial&quot;">​</a></h1><p>This tutorial section will guide you through using the most common RPC endpoints with the golang client library.</p><p>Install <a href="/how-to-guides/environment">dependencies</a> and <a href="/how-to-guides/celestia-node">celestia-node</a> if you have not already.</p><h2 id="project-setup" tabindex="-1">Project setup <a class="header-anchor" href="#project-setup" aria-label="Permalink to &quot;Project setup&quot;">​</a></h2><p>To start, add celestia-node and go-square as dependencies to your project:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">github.com/celestiaorg/celestia-node@v0.22.1</span></span>
<span class="line"><span style="color:#B392F0;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">github.com/celestiaorg/go-square/v2@v2.2.0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">github.com/celestiaorg/celestia-node@v0.22.1</span></span>
<span class="line"><span style="color:#6F42C1;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">github.com/celestiaorg/go-square/v2@v2.2.0</span></span></code></pre></div><p>Additionally, make sure to replace the following dependencies in your go.mod file</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">github.com/cosmos/cosmos-sdk</span><span style="color:#E1E4E8;"> =</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">github.com/celestiaorg/cosmos-sdk</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">v1.28.2-sdk-v0.46.16</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">github.com/filecoin-project/dagstore</span><span style="color:#E1E4E8;"> =</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">github.com/celestiaorg/dagstore</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">v0.0.0-20230824094345-537c012aa403</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">github.com/gogo/protobuf</span><span style="color:#E1E4E8;"> =</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">github.com/regen-network/protobuf</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">v1.3.3-alpha.regen.1</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">github.com/syndtr/goleveldb</span><span style="color:#E1E4E8;"> =</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">github.com/syndtr/goleveldb</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">v1.0.1-0.20210819022825-2ae1ddf74ef7</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">github.com/tendermint/tendermint</span><span style="color:#E1E4E8;"> =</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">github.com/celestiaorg/celestia-core</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">v1.51.0-tm-v0.34.35</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">github.com/ipfs/boxo</span><span style="color:#E1E4E8;"> =</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">github.com/celestiaorg/boxo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">v0.29.0-fork</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">replace</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">github.com/cosmos/cosmos-sdk</span><span style="color:#24292E;"> =</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">github.com/celestiaorg/cosmos-sdk</span><span style="color:#24292E;"> </span><span style="color:#032F62;">v1.28.2-sdk-v0.46.16</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">github.com/filecoin-project/dagstore</span><span style="color:#24292E;"> =</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">github.com/celestiaorg/dagstore</span><span style="color:#24292E;"> </span><span style="color:#032F62;">v0.0.0-20230824094345-537c012aa403</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">github.com/gogo/protobuf</span><span style="color:#24292E;"> =</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">github.com/regen-network/protobuf</span><span style="color:#24292E;"> </span><span style="color:#032F62;">v1.3.3-alpha.regen.1</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">github.com/syndtr/goleveldb</span><span style="color:#24292E;"> =</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">github.com/syndtr/goleveldb</span><span style="color:#24292E;"> </span><span style="color:#032F62;">v1.0.1-0.20210819022825-2ae1ddf74ef7</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">github.com/tendermint/tendermint</span><span style="color:#24292E;"> =</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">github.com/celestiaorg/celestia-core</span><span style="color:#24292E;"> </span><span style="color:#032F62;">v1.51.0-tm-v0.34.35</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">github.com/ipfs/boxo</span><span style="color:#24292E;"> =</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">github.com/celestiaorg/boxo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">v0.29.0-fork</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>To use the following methods, you will need the node URL and your auth token. To get your auth token, see this <a href="/tutorials/node-tutorial#auth-token">guide</a>. To run your node without an auth token, you can use the <code>--rpc.skip-auth</code> flag when starting your node. This allows you to pass an empty string as your auth token.</p><p>The default URL is <code>http://localhost:26658</code>. If you would like to use subscription methods, such as <code>SubscribeHeaders</code> below, you must use the <code>ws</code> protocol in place of <code>http</code>: <code>ws://localhost:26658</code>.</p><blockquote><p><strong>Important:</strong> Remember to close the client connection when you&#39;re done using it to prevent resource leaks:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> client.</span><span style="color:#79B8FF;">Close</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> client.</span><span style="color:#005CC5;">Close</span><span style="color:#24292E;">()</span></span></code></pre></div></blockquote><h2 id="submitting-and-retrieving-blobs" tabindex="-1">Submitting and retrieving blobs <a class="header-anchor" href="#submitting-and-retrieving-blobs" aria-label="Permalink to &quot;Submitting and retrieving blobs&quot;">​</a></h2><p>The <a href="https://node-rpc-docs.celestia.org/#blob.Submit" target="_blank" rel="noreferrer">blob.Submit</a> method takes a slice of blobs and a gas price, returning the height the blob was successfully posted at.</p><ul><li>The namespace can be generated with <code>share.NewV0Namespace</code>.</li><li>The blobs can be generated with <code>blob.NewBlobV0</code>.</li><li>You can use <code>blob.NewSubmitOptions()</code>, which has celestia-node automatically determine an appropriate gas price. To set your own gas price, use <code>blob.NewSubmitOptions().WithGasPrice(X)</code>. The available options are <code>WithGasPrice</code>, <code>WithGas</code>, <code>WithKeyName</code>, <code>WithSignerAddress</code>, and <code>WithFeeGranterAddress</code>.</li></ul><p>The <a href="https://node-rpc-docs.celestia.org/#blob.GetAll" target="_blank" rel="noreferrer">blob.GetAll</a> method takes a height and slice of namespaces, returning the slice of blobs found in the given namespaces.</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">bytes</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">context</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">fmt</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">client</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">github.com/celestiaorg/celestia-node/api/rpc/client</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">github.com/celestiaorg/celestia-node/blob</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">share</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">github.com/celestiaorg/go-square/v2/share</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// SubmitBlob submits a blob containing &quot;Hello, World!&quot; to the 0xDEADBEEF namespace. It uses the default signer on the running node.</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SubmitBlob</span><span style="color:#E1E4E8;">(ctx context.Context, url </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">, token </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    client, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#79B8FF;">NewClient</span><span style="color:#E1E4E8;">(ctx, url, token)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> client.</span><span style="color:#79B8FF;">Close</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// It is important to close the connection after use</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// let&#39;s post to 0xDEADBEEF namespace</span></span>
<span class="line"><span style="color:#E1E4E8;">    namespace, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> share.</span><span style="color:#79B8FF;">NewV0Namespace</span><span style="color:#E1E4E8;">([]</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">{</span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">DE</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">AD</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">BE</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">EF</span><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// create a blob</span></span>
<span class="line"><span style="color:#E1E4E8;">    helloWorldBlob, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> blob.</span><span style="color:#79B8FF;">NewBlobV0</span><span style="color:#E1E4E8;">(namespace, []</span><span style="color:#79B8FF;">byte</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Hello, World!&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// submit the blob to the network</span></span>
<span class="line"><span style="color:#E1E4E8;">    height, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> client.Blob.</span><span style="color:#79B8FF;">Submit</span><span style="color:#E1E4E8;">(ctx, []</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">blob.Blob{helloWorldBlob}, </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Blob was included at height </span><span style="color:#79B8FF;">%d\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, height)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// fetch the blob back from the network</span></span>
<span class="line"><span style="color:#E1E4E8;">    retrievedBlobs, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> client.Blob.</span><span style="color:#79B8FF;">GetAll</span><span style="color:#E1E4E8;">(ctx, height, []share.Namespace{namespace})</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Blobs are equal? </span><span style="color:#79B8FF;">%v\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, bytes.</span><span style="color:#79B8FF;">Equal</span><span style="color:#E1E4E8;">(helloWorldBlob.Commitment, retrievedBlobs[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].Commitment))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">bytes</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">context</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">fmt</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">client</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">github.com/celestiaorg/celestia-node/api/rpc/client</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">github.com/celestiaorg/celestia-node/blob</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">share</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">github.com/celestiaorg/go-square/v2/share</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// SubmitBlob submits a blob containing &quot;Hello, World!&quot; to the 0xDEADBEEF namespace. It uses the default signer on the running node.</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SubmitBlob</span><span style="color:#24292E;">(ctx context.Context, url </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">, token </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">error</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    client, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> client.</span><span style="color:#005CC5;">NewClient</span><span style="color:#24292E;">(ctx, url, token)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> client.</span><span style="color:#005CC5;">Close</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// It is important to close the connection after use</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// let&#39;s post to 0xDEADBEEF namespace</span></span>
<span class="line"><span style="color:#24292E;">    namespace, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> share.</span><span style="color:#005CC5;">NewV0Namespace</span><span style="color:#24292E;">([]</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">{</span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">DE</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">AD</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">BE</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">EF</span><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// create a blob</span></span>
<span class="line"><span style="color:#24292E;">    helloWorldBlob, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> blob.</span><span style="color:#005CC5;">NewBlobV0</span><span style="color:#24292E;">(namespace, []</span><span style="color:#005CC5;">byte</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello, World!&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// submit the blob to the network</span></span>
<span class="line"><span style="color:#24292E;">    height, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> client.Blob.</span><span style="color:#005CC5;">Submit</span><span style="color:#24292E;">(ctx, []</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">blob.Blob{helloWorldBlob}, </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    fmt.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Blob was included at height </span><span style="color:#005CC5;">%d\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, height)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// fetch the blob back from the network</span></span>
<span class="line"><span style="color:#24292E;">    retrievedBlobs, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> client.Blob.</span><span style="color:#005CC5;">GetAll</span><span style="color:#24292E;">(ctx, height, []share.Namespace{namespace})</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    fmt.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Blobs are equal? </span><span style="color:#005CC5;">%v\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, bytes.</span><span style="color:#005CC5;">Equal</span><span style="color:#24292E;">(helloWorldBlob.Commitment, retrievedBlobs[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].Commitment))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="subscribing-to-new-blobs" tabindex="-1">Subscribing to new blobs <a class="header-anchor" href="#subscribing-to-new-blobs" aria-label="Permalink to &quot;Subscribing to new blobs&quot;">​</a></h2><p>You can subscribe to new blobs in a namespace using the <a href="https://node-rpc-docs.celestia.org/#blob.Subscribe" target="_blank" rel="noreferrer">blob.Subscribe</a> method. This method returns a channel that will receive new blobs as they are produced. In this example, we will fetch all blobs in the <code>0xDEADBEEF</code> namespace.</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SubscribeBlobs</span><span style="color:#E1E4E8;">(ctx context.Context, url </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">, token </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    client, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#79B8FF;">NewClient</span><span style="color:#E1E4E8;">(ctx, url, token)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> client.</span><span style="color:#79B8FF;">Close</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// We close the WebSocket connection after use</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// create a namespace to filter blobs with</span></span>
<span class="line"><span style="color:#E1E4E8;">    namespace, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> share.</span><span style="color:#79B8FF;">NewV0Namespace</span><span style="color:#E1E4E8;">([]</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">{</span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">DE</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">AD</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">BE</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">EF</span><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// subscribe to new blobs using a &lt;-chan *blob.BlobResponse channel</span></span>
<span class="line"><span style="color:#E1E4E8;">    blobChan, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> client.Blob.</span><span style="color:#79B8FF;">Subscribe</span><span style="color:#E1E4E8;">(ctx, namespace)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">select</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> resp </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;">blobChan:</span></span>
<span class="line"><span style="color:#E1E4E8;">            fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Found </span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;"> blobs at height </span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;"> in 0xDEADBEEF namespace</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(resp.</span><span style="color:#79B8FF;">Blobs</span><span style="color:#E1E4E8;">()), resp.Height)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;">ctx.</span><span style="color:#79B8FF;">Done</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SubscribeBlobs</span><span style="color:#24292E;">(ctx context.Context, url </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">, token </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">error</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    client, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> client.</span><span style="color:#005CC5;">NewClient</span><span style="color:#24292E;">(ctx, url, token)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> client.</span><span style="color:#005CC5;">Close</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// We close the WebSocket connection after use</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// create a namespace to filter blobs with</span></span>
<span class="line"><span style="color:#24292E;">    namespace, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> share.</span><span style="color:#005CC5;">NewV0Namespace</span><span style="color:#24292E;">([]</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">{</span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">DE</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">AD</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">BE</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">EF</span><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// subscribe to new blobs using a &lt;-chan *blob.BlobResponse channel</span></span>
<span class="line"><span style="color:#24292E;">    blobChan, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> client.Blob.</span><span style="color:#005CC5;">Subscribe</span><span style="color:#24292E;">(ctx, namespace)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">select</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> resp </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;">blobChan:</span></span>
<span class="line"><span style="color:#24292E;">            fmt.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Found </span><span style="color:#005CC5;">%d</span><span style="color:#032F62;"> blobs at height </span><span style="color:#005CC5;">%d</span><span style="color:#032F62;"> in 0xDEADBEEF namespace</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(resp.</span><span style="color:#005CC5;">Blobs</span><span style="color:#24292E;">()), resp.Height)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;">ctx.</span><span style="color:#005CC5;">Done</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="subscribing-to-new-headers" tabindex="-1">Subscribing to new headers <a class="header-anchor" href="#subscribing-to-new-headers" aria-label="Permalink to &quot;Subscribing to new headers&quot;">​</a></h2><p>Alternatively, you can subscribe to new headers using the <a href="https://node-rpc-docs.celestia.org/#header.Subscribe" target="_blank" rel="noreferrer">header.Subscribe</a> method. This method returns a channel that will receive new headers as they are produced. In this example, we will fetch all blobs at the height of the new header in the <code>0xDEADBEEF</code> namespace.</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// SubscribeHeaders subscribes to new headers and fetches all blobs at the height of the new header in the 0xDEADBEEF namespace.</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SubscribeHeaders</span><span style="color:#E1E4E8;">(ctx context.Context, url </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">, token </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    client, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#79B8FF;">NewClient</span><span style="color:#E1E4E8;">(ctx, url, token)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> client.</span><span style="color:#79B8FF;">Close</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// We close the WebSocket connection after usage</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// create a namespace to filter blobs with</span></span>
<span class="line"><span style="color:#E1E4E8;">    namespace, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> share.</span><span style="color:#79B8FF;">NewV0Namespace</span><span style="color:#E1E4E8;">([]</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">{</span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">DE</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">AD</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">BE</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">EF</span><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// subscribe to new headers using a &lt;-chan *header.ExtendedHeader channel</span></span>
<span class="line"><span style="color:#E1E4E8;">    headerChan, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> client.Header.</span><span style="color:#79B8FF;">Subscribe</span><span style="color:#E1E4E8;">(ctx)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">select</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> header </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;">headerChan:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// fetch all blobs at the height of the new header</span></span>
<span class="line"><span style="color:#E1E4E8;">            blobs, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> client.Blob.</span><span style="color:#79B8FF;">GetAll</span><span style="color:#E1E4E8;">(context.</span><span style="color:#79B8FF;">TODO</span><span style="color:#E1E4E8;">(), header.</span><span style="color:#79B8FF;">Height</span><span style="color:#E1E4E8;">(), []share.Namespace{namespace})</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Error fetching blobs: </span><span style="color:#79B8FF;">%v\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Found </span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;"> blobs at height </span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;"> in 0xDEADBEEF namespace</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(blobs), header.</span><span style="color:#79B8FF;">Height</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;">ctx.</span><span style="color:#79B8FF;">Done</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// SubscribeHeaders subscribes to new headers and fetches all blobs at the height of the new header in the 0xDEADBEEF namespace.</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SubscribeHeaders</span><span style="color:#24292E;">(ctx context.Context, url </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">, token </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">error</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    client, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> client.</span><span style="color:#005CC5;">NewClient</span><span style="color:#24292E;">(ctx, url, token)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> client.</span><span style="color:#005CC5;">Close</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// We close the WebSocket connection after usage</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// create a namespace to filter blobs with</span></span>
<span class="line"><span style="color:#24292E;">    namespace, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> share.</span><span style="color:#005CC5;">NewV0Namespace</span><span style="color:#24292E;">([]</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">{</span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">DE</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">AD</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">BE</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">EF</span><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// subscribe to new headers using a &lt;-chan *header.ExtendedHeader channel</span></span>
<span class="line"><span style="color:#24292E;">    headerChan, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> client.Header.</span><span style="color:#005CC5;">Subscribe</span><span style="color:#24292E;">(ctx)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">select</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> header </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;">headerChan:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// fetch all blobs at the height of the new header</span></span>
<span class="line"><span style="color:#24292E;">            blobs, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> client.Blob.</span><span style="color:#005CC5;">GetAll</span><span style="color:#24292E;">(context.</span><span style="color:#005CC5;">TODO</span><span style="color:#24292E;">(), header.</span><span style="color:#005CC5;">Height</span><span style="color:#24292E;">(), []share.Namespace{namespace})</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                fmt.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Error fetching blobs: </span><span style="color:#005CC5;">%v\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            fmt.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Found </span><span style="color:#005CC5;">%d</span><span style="color:#032F62;"> blobs at height </span><span style="color:#005CC5;">%d</span><span style="color:#032F62;"> in 0xDEADBEEF namespace</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(blobs), header.</span><span style="color:#005CC5;">Height</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;">ctx.</span><span style="color:#005CC5;">Done</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="fetching-an-extended-data-square-eds" tabindex="-1">Fetching an Extended Data Square (EDS) <a class="header-anchor" href="#fetching-an-extended-data-square-eds" aria-label="Permalink to &quot;Fetching an Extended Data Square (EDS)&quot;">​</a></h2><p>You can fetch an <a href="https://celestiaorg.github.io/celestia-app/data_structures.html#erasure-coding" target="_blank" rel="noreferrer">Extended Data Square (EDS)</a> using the <a href="https://node-rpc-docs.celestia.org/#share.GetEDS" target="_blank" rel="noreferrer">share.GetEDS</a> method. This method takes a header and returns the EDS at the given height.</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// GetEDS fetches the EDS at the given height.</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GetEDS</span><span style="color:#E1E4E8;">(ctx context.Context, url </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">, token </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">, height </span><span style="color:#F97583;">uint64</span><span style="color:#E1E4E8;">) (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">rsmt2d.ExtendedDataSquare, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    client, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#79B8FF;">NewClient</span><span style="color:#E1E4E8;">(ctx, url, token)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, err</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> client.</span><span style="color:#79B8FF;">Close</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// We close the connection after use</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Fetch the EDS</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> client.Share.</span><span style="color:#79B8FF;">GetEDS</span><span style="color:#E1E4E8;">(ctx, height)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// GetEDS fetches the EDS at the given height.</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GetEDS</span><span style="color:#24292E;">(ctx context.Context, url </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">, token </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">, height </span><span style="color:#D73A49;">uint64</span><span style="color:#24292E;">) (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">rsmt2d.ExtendedDataSquare, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    client, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> client.</span><span style="color:#005CC5;">NewClient</span><span style="color:#24292E;">(ctx, url, token)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, err</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> client.</span><span style="color:#005CC5;">Close</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// We close the connection after use</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Fetch the EDS</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> client.Share.</span><span style="color:#005CC5;">GetEDS</span><span style="color:#24292E;">(ctx, height)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="api-documentation" tabindex="-1">API documentation <a class="header-anchor" href="#api-documentation" aria-label="Permalink to &quot;API documentation&quot;">​</a></h2><p>To see the full list of available methods, see the <a href="https://node-rpc-docs.celestia.org/" target="_blank" rel="noreferrer">API documentation</a>.</p><h2 id="complete-example" tabindex="-1">Complete example <a class="header-anchor" href="#complete-example" aria-label="Permalink to &quot;Complete example&quot;">​</a></h2><p>Here&#39;s a complete example that demonstrates connecting to a Celestia node, checking the network head, and submitting/retrieving a blob.</p><p>First, here&#39;s a minimal <code>go.mod</code> file:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">module celestia</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">test</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">1.23.6</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">toolchain go1.</span><span style="color:#79B8FF;">23.8</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">require (</span></span>
<span class="line"><span style="color:#E1E4E8;"> github.com</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">celestiaorg</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">celestia</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">node v0.</span><span style="color:#79B8FF;">22.1</span></span>
<span class="line"><span style="color:#E1E4E8;"> github.com</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">celestiaorg</span><span style="color:#F97583;">/go-</span><span style="color:#E1E4E8;">square</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">v2 v2.</span><span style="color:#79B8FF;">2.0</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">replace (</span></span>
<span class="line"><span style="color:#E1E4E8;"> github.com</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">cosmos</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">cosmos</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">sdk </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> github.com</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">celestiaorg</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">cosmos</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">sdk v1.</span><span style="color:#79B8FF;">28.2</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">sdk</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">v0.</span><span style="color:#79B8FF;">46.16</span></span>
<span class="line"><span style="color:#E1E4E8;"> github.com</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">filecoin</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">project</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">dagstore </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> github.com</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">celestiaorg</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">dagstore v0.</span><span style="color:#79B8FF;">0.0</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">20230824094345</span><span style="color:#F97583;">-</span><span style="color:#FDAEB7;font-style:italic;">537c012aa403</span></span>
<span class="line"><span style="color:#E1E4E8;"> github.com</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">gogo</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">protobuf </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> github.com</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">regen</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">network</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">protobuf v1.</span><span style="color:#79B8FF;">3.3</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">alpha.regen.</span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;"> github.com</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">ipfs</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">boxo </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> github.com</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">celestiaorg</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">boxo v0.</span><span style="color:#79B8FF;">29.0</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">fork</span></span>
<span class="line"><span style="color:#E1E4E8;"> github.com</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">syndtr</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">goleveldb </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> github.com</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">syndtr</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">goleveldb v1.</span><span style="color:#79B8FF;">0.1</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">0.20210819022825</span><span style="color:#F97583;">-</span><span style="color:#FDAEB7;font-style:italic;">2ae1ddf74ef7</span></span>
<span class="line"><span style="color:#E1E4E8;"> github.com</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">tendermint</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">tendermint </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> github.com</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">celestiaorg</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">celestia</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">core v1.</span><span style="color:#79B8FF;">51.0</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">tm</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">v0.</span><span style="color:#79B8FF;">34.35</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">module celestia</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">test</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">go</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">1.23.6</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">toolchain go1.</span><span style="color:#005CC5;">23.8</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">require (</span></span>
<span class="line"><span style="color:#24292E;"> github.com</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">celestiaorg</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">celestia</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">node v0.</span><span style="color:#005CC5;">22.1</span></span>
<span class="line"><span style="color:#24292E;"> github.com</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">celestiaorg</span><span style="color:#D73A49;">/go-</span><span style="color:#24292E;">square</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">v2 v2.</span><span style="color:#005CC5;">2.0</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">replace (</span></span>
<span class="line"><span style="color:#24292E;"> github.com</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">cosmos</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">cosmos</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">sdk </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> github.com</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">celestiaorg</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">cosmos</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">sdk v1.</span><span style="color:#005CC5;">28.2</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">sdk</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">v0.</span><span style="color:#005CC5;">46.16</span></span>
<span class="line"><span style="color:#24292E;"> github.com</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">filecoin</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">project</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">dagstore </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> github.com</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">celestiaorg</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">dagstore v0.</span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">20230824094345</span><span style="color:#D73A49;">-</span><span style="color:#B31D28;font-style:italic;">537c012aa403</span></span>
<span class="line"><span style="color:#24292E;"> github.com</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">gogo</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">protobuf </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> github.com</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">regen</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">network</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">protobuf v1.</span><span style="color:#005CC5;">3.3</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">alpha.regen.</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;"> github.com</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">ipfs</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">boxo </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> github.com</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">celestiaorg</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">boxo v0.</span><span style="color:#005CC5;">29.0</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">fork</span></span>
<span class="line"><span style="color:#24292E;"> github.com</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">syndtr</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">goleveldb </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> github.com</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">syndtr</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">goleveldb v1.</span><span style="color:#005CC5;">0.1</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">0.20210819022825</span><span style="color:#D73A49;">-</span><span style="color:#B31D28;font-style:italic;">2ae1ddf74ef7</span></span>
<span class="line"><span style="color:#24292E;"> github.com</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">tendermint</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">tendermint </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> github.com</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">celestiaorg</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">celestia</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">core v1.</span><span style="color:#005CC5;">51.0</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">tm</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">v0.</span><span style="color:#005CC5;">34.35</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>And here&#39;s the <code>main.go</code> file:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">bytes</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">context</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">fmt</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">os</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">time</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">client</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">github.com/celestiaorg/celestia-node/api/rpc/client</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">github.com/celestiaorg/celestia-node/blob</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">github.com/celestiaorg/celestia-node/state</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">share</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">github.com/celestiaorg/go-square/v2/share</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// Set up a context with timeout</span></span>
<span class="line"><span style="color:#E1E4E8;"> ctx, cancel </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> context.</span><span style="color:#79B8FF;">WithTimeout</span><span style="color:#E1E4E8;">(context.</span><span style="color:#79B8FF;">Background</span><span style="color:#E1E4E8;">(), </span><span style="color:#79B8FF;">5</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">time.Minute)</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cancel</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// Default RPC URL and token (empty string if using --rpc.skip-auth)</span></span>
<span class="line"><span style="color:#E1E4E8;"> url </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;http://localhost:26658&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;"> token </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// Replace with your auth token if not using --rpc.skip-auth</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// Check if we can connect to the node first</span></span>
<span class="line"><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Testing connection to Celestia node...&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;"> c, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#79B8FF;">NewClient</span><span style="color:#E1E4E8;">(ctx, url, token)</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Failed to connect to node: </span><span style="color:#79B8FF;">%v\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">  os.</span><span style="color:#79B8FF;">Exit</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> c.</span><span style="color:#79B8FF;">Close</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Successfully connected to node, checking node status...&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// Try a simpler API call first - get network head to verify connectivity</span></span>
<span class="line"><span style="color:#E1E4E8;"> headerHeight, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">GetNetworkHead</span><span style="color:#E1E4E8;">(ctx, c)</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Failed to get network head: </span><span style="color:#79B8FF;">%v\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Current network height: </span><span style="color:#79B8FF;">%d\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, headerHeight)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Now try blob submission</span></span>
<span class="line"><span style="color:#E1E4E8;">  err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SubmitBlob</span><span style="color:#E1E4E8;">(ctx, url, token)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Blob submission error: </span><span style="color:#79B8FF;">%v\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// SubmitBlob submits a blob containing &quot;Hello, World!&quot; to the 0xDEADBEEF namespace</span></span>
<span class="line"><span style="color:#6A737D;">// and retrieves it from the network to verify the process works.</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SubmitBlob</span><span style="color:#E1E4E8;">(ctx context.Context, url </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">, token </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// Create a new client</span></span>
<span class="line"><span style="color:#E1E4E8;"> c, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#79B8FF;">NewClient</span><span style="color:#E1E4E8;">(ctx, url, token)</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;failed to create client: </span><span style="color:#79B8FF;">%w</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> c.</span><span style="color:#79B8FF;">Close</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// Important to close the connection after use</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Connected to Celestia node&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// Create the 0xDEADBEEF namespace</span></span>
<span class="line"><span style="color:#E1E4E8;"> namespace, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> share.</span><span style="color:#79B8FF;">NewV0Namespace</span><span style="color:#E1E4E8;">([]</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">{</span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">DE</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">AD</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">BE</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">EF</span><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;failed to create namespace: </span><span style="color:#79B8FF;">%w</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// Create a blob with &quot;Hello, World!&quot; content</span></span>
<span class="line"><span style="color:#E1E4E8;"> message </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> []</span><span style="color:#79B8FF;">byte</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Hello, World!&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;"> helloWorldBlob, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> blob.</span><span style="color:#79B8FF;">NewBlobV0</span><span style="color:#E1E4E8;">(namespace, message)</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;failed to create blob: </span><span style="color:#79B8FF;">%w</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Submitting blob to the network...&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// Create basic TxConfig instead of passing nil</span></span>
<span class="line"><span style="color:#E1E4E8;"> options </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> state.</span><span style="color:#79B8FF;">NewTxConfig</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// Submit the blob to the network with the options</span></span>
<span class="line"><span style="color:#E1E4E8;"> height, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> c.Blob.</span><span style="color:#79B8FF;">Submit</span><span style="color:#E1E4E8;">(ctx, []</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">blob.Blob{helloWorldBlob}, options)</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;failed to submit blob: </span><span style="color:#79B8FF;">%w</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Success! Blob was included at height </span><span style="color:#79B8FF;">%d\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, height)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// Wait a moment to ensure the blob is available for retrieval</span></span>
<span class="line"><span style="color:#E1E4E8;"> time.</span><span style="color:#79B8FF;">Sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> time.Second)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Retrieving blob from the network...&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// Fetch the blob back from the network</span></span>
<span class="line"><span style="color:#E1E4E8;"> retrievedBlobs, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> c.Blob.</span><span style="color:#79B8FF;">GetAll</span><span style="color:#E1E4E8;">(ctx, height, []share.Namespace{namespace})</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;failed to retrieve blob: </span><span style="color:#79B8FF;">%w</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(retrievedBlobs) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;no blobs retrieved from height </span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, height)</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// Verify the retrieved blob matches the submitted blob</span></span>
<span class="line"><span style="color:#E1E4E8;"> equal </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> bytes.</span><span style="color:#79B8FF;">Equal</span><span style="color:#E1E4E8;">(helloWorldBlob.Commitment, retrievedBlobs[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].Commitment)</span></span>
<span class="line"><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Retrieved blob successfully! Blobs are equal? </span><span style="color:#79B8FF;">%v\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, equal)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// Verify the content is what we expect</span></span>
<span class="line"><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Original message: </span><span style="color:#79B8FF;">%s\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, message)</span></span>
<span class="line"><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Retrieved message: </span><span style="color:#79B8FF;">%s\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, retrievedBlobs[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].Data)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// GetNetworkHead retrieves the current network height</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GetNetworkHead</span><span style="color:#E1E4E8;">(ctx context.Context, c </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">client.Client) (</span><span style="color:#F97583;">uint64</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// Get the network head</span></span>
<span class="line"><span style="color:#E1E4E8;"> header, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> c.Header.</span><span style="color:#79B8FF;">NetworkHead</span><span style="color:#E1E4E8;">(ctx)</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;failed to get network head: </span><span style="color:#79B8FF;">%w</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> header.</span><span style="color:#79B8FF;">Height</span><span style="color:#E1E4E8;">(), </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">bytes</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">context</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">fmt</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">os</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">time</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">client</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">github.com/celestiaorg/celestia-node/api/rpc/client</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">github.com/celestiaorg/celestia-node/blob</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">github.com/celestiaorg/celestia-node/state</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">share</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">github.com/celestiaorg/go-square/v2/share</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">// Set up a context with timeout</span></span>
<span class="line"><span style="color:#24292E;"> ctx, cancel </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> context.</span><span style="color:#005CC5;">WithTimeout</span><span style="color:#24292E;">(context.</span><span style="color:#005CC5;">Background</span><span style="color:#24292E;">(), </span><span style="color:#005CC5;">5</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">time.Minute)</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">cancel</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">// Default RPC URL and token (empty string if using --rpc.skip-auth)</span></span>
<span class="line"><span style="color:#24292E;"> url </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;http://localhost:26658&quot;</span></span>
<span class="line"><span style="color:#24292E;"> token </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// Replace with your auth token if not using --rpc.skip-auth</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">// Check if we can connect to the node first</span></span>
<span class="line"><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Testing connection to Celestia node...&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;"> c, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> client.</span><span style="color:#005CC5;">NewClient</span><span style="color:#24292E;">(ctx, url, token)</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  fmt.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Failed to connect to node: </span><span style="color:#005CC5;">%v\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">  os.</span><span style="color:#005CC5;">Exit</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> c.</span><span style="color:#005CC5;">Close</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Successfully connected to node, checking node status...&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">// Try a simpler API call first - get network head to verify connectivity</span></span>
<span class="line"><span style="color:#24292E;"> headerHeight, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">GetNetworkHead</span><span style="color:#24292E;">(ctx, c)</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  fmt.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Failed to get network head: </span><span style="color:#005CC5;">%v\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;"> } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  fmt.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Current network height: </span><span style="color:#005CC5;">%d\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, headerHeight)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Now try blob submission</span></span>
<span class="line"><span style="color:#24292E;">  err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SubmitBlob</span><span style="color:#24292E;">(ctx, url, token)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   fmt.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Blob submission error: </span><span style="color:#005CC5;">%v\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// SubmitBlob submits a blob containing &quot;Hello, World!&quot; to the 0xDEADBEEF namespace</span></span>
<span class="line"><span style="color:#6A737D;">// and retrieves it from the network to verify the process works.</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SubmitBlob</span><span style="color:#24292E;">(ctx context.Context, url </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">, token </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">error</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">// Create a new client</span></span>
<span class="line"><span style="color:#24292E;"> c, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> client.</span><span style="color:#005CC5;">NewClient</span><span style="color:#24292E;">(ctx, url, token)</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;failed to create client: </span><span style="color:#005CC5;">%w</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> c.</span><span style="color:#005CC5;">Close</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// Important to close the connection after use</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Connected to Celestia node&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">// Create the 0xDEADBEEF namespace</span></span>
<span class="line"><span style="color:#24292E;"> namespace, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> share.</span><span style="color:#005CC5;">NewV0Namespace</span><span style="color:#24292E;">([]</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">{</span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">DE</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">AD</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">BE</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">EF</span><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;failed to create namespace: </span><span style="color:#005CC5;">%w</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">// Create a blob with &quot;Hello, World!&quot; content</span></span>
<span class="line"><span style="color:#24292E;"> message </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> []</span><span style="color:#005CC5;">byte</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello, World!&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;"> helloWorldBlob, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> blob.</span><span style="color:#005CC5;">NewBlobV0</span><span style="color:#24292E;">(namespace, message)</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;failed to create blob: </span><span style="color:#005CC5;">%w</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Submitting blob to the network...&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">// Create basic TxConfig instead of passing nil</span></span>
<span class="line"><span style="color:#24292E;"> options </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> state.</span><span style="color:#005CC5;">NewTxConfig</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">// Submit the blob to the network with the options</span></span>
<span class="line"><span style="color:#24292E;"> height, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> c.Blob.</span><span style="color:#005CC5;">Submit</span><span style="color:#24292E;">(ctx, []</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">blob.Blob{helloWorldBlob}, options)</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;failed to submit blob: </span><span style="color:#005CC5;">%w</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Success! Blob was included at height </span><span style="color:#005CC5;">%d\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, height)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">// Wait a moment to ensure the blob is available for retrieval</span></span>
<span class="line"><span style="color:#24292E;"> time.</span><span style="color:#005CC5;">Sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> time.Second)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Retrieving blob from the network...&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">// Fetch the blob back from the network</span></span>
<span class="line"><span style="color:#24292E;"> retrievedBlobs, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> c.Blob.</span><span style="color:#005CC5;">GetAll</span><span style="color:#24292E;">(ctx, height, []share.Namespace{namespace})</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;failed to retrieve blob: </span><span style="color:#005CC5;">%w</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(retrievedBlobs) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;no blobs retrieved from height </span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, height)</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">// Verify the retrieved blob matches the submitted blob</span></span>
<span class="line"><span style="color:#24292E;"> equal </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> bytes.</span><span style="color:#005CC5;">Equal</span><span style="color:#24292E;">(helloWorldBlob.Commitment, retrievedBlobs[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].Commitment)</span></span>
<span class="line"><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Retrieved blob successfully! Blobs are equal? </span><span style="color:#005CC5;">%v\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, equal)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">// Verify the content is what we expect</span></span>
<span class="line"><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Original message: </span><span style="color:#005CC5;">%s\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, message)</span></span>
<span class="line"><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Retrieved message: </span><span style="color:#005CC5;">%s\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, retrievedBlobs[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].Data)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// GetNetworkHead retrieves the current network height</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GetNetworkHead</span><span style="color:#24292E;">(ctx context.Context, c </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">client.Client) (</span><span style="color:#D73A49;">uint64</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">// Get the network head</span></span>
<span class="line"><span style="color:#24292E;"> header, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> c.Header.</span><span style="color:#005CC5;">NetworkHead</span><span style="color:#24292E;">(ctx)</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;failed to get network head: </span><span style="color:#005CC5;">%w</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> header.</span><span style="color:#005CC5;">Height</span><span style="color:#24292E;">(), </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>This example demonstrates:</p><ol><li>Connecting to a Celestia light node</li><li>Checking the current network height</li><li>Creating a namespace and blob</li><li>Submitting the blob to the network</li><li>Retrieving and verifying the blob</li></ol><p>To run this example, save it as <code>main.go</code> in your project directory and run <code>go run main.go</code>. Make sure your Celestia node is running and accessible at the URL specified in the code.</p><p>Once you run the program, you&#39;ll see a result like this!</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">go run main.go</span></span>
<span class="line"><span style="color:#e1e4e8;">Testing connection to Celestia node...</span></span>
<span class="line"><span style="color:#e1e4e8;">Successfully connected to node, checking node status...</span></span>
<span class="line"><span style="color:#e1e4e8;">Current network height: 5867246</span></span>
<span class="line"><span style="color:#e1e4e8;">Connected to Celestia node</span></span>
<span class="line"><span style="color:#e1e4e8;">Submitting blob to the network...</span></span>
<span class="line"><span style="color:#e1e4e8;">Success! Blob was included at height 5867247</span></span>
<span class="line"><span style="color:#e1e4e8;">Retrieving blob from the network...</span></span>
<span class="line"><span style="color:#e1e4e8;">Retrieved blob successfully! Blobs are equal? true</span></span>
<span class="line"><span style="color:#e1e4e8;">Original message: Hello, World!</span></span>
<span class="line"><span style="color:#e1e4e8;">Retrieved message: %!s(func() []uint8=0x1023543d0)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">go run main.go</span></span>
<span class="line"><span style="color:#24292e;">Testing connection to Celestia node...</span></span>
<span class="line"><span style="color:#24292e;">Successfully connected to node, checking node status...</span></span>
<span class="line"><span style="color:#24292e;">Current network height: 5867246</span></span>
<span class="line"><span style="color:#24292e;">Connected to Celestia node</span></span>
<span class="line"><span style="color:#24292e;">Submitting blob to the network...</span></span>
<span class="line"><span style="color:#24292e;">Success! Blob was included at height 5867247</span></span>
<span class="line"><span style="color:#24292e;">Retrieving blob from the network...</span></span>
<span class="line"><span style="color:#24292e;">Retrieved blob successfully! Blobs are equal? true</span></span>
<span class="line"><span style="color:#24292e;">Original message: Hello, World!</span></span>
<span class="line"><span style="color:#24292e;">Retrieved message: %!s(func() []uint8=0x1023543d0)</span></span></code></pre></div>`,38)]))}const u=n(p,[["render",e]]);export{F as __pageData,u as default};
