import{_ as a,o as n,c as l,O as p}from"./chunks/framework.6b456e69.js";const F=JSON.parse('{"title":"Rust client library tutorial","description":"","frontmatter":{"next":{"text":"Create a wallet with celestia-node","link":"/tutorials/celestia-node-key"},"head":[["meta",{"property":"og:title","content":"Rust client library tutorial | Celestia Docs"}],["meta",{"property":"og:description","content":"The first modular blockchain network."}]]},"headers":[],"relativePath":"tutorials/rust-client-tutorial.md","filePath":"tutorials/rust-client-tutorial.md","lastUpdated":1754588909000}'),o={name:"tutorials/rust-client-tutorial.md"};function e(t,s,c,r,E,y){return n(),l("div",null,s[0]||(s[0]=[p(`<h1 id="rust-client-library" tabindex="-1">Rust client library tutorial <a class="header-anchor" href="#rust-client-library" aria-label="Permalink to &quot;Rust client library tutorial {#rust-client-library}&quot;">​</a></h1><p>This tutorial section will guide you through using the most common RPC endpoints with <a href="https://github.com/eigerco/lumina/tree/main/rpc" target="_blank" rel="noreferrer">Lumina</a>&#39;s rust client library.</p><p>Install <a href="/how-to-guides/environment">dependencies</a> and <a href="/how-to-guides/celestia-node">celestia-node</a> if you have not already.</p><h2 id="project-setup" tabindex="-1">Project setup <a class="header-anchor" href="#project-setup" aria-label="Permalink to &quot;Project setup&quot;">​</a></h2><p>To start, add <code>celestia_rpc</code> and <code>celestia_types</code> as a dependency to your project:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">cargo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">celestia_rpc</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">celestia_types</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">cargo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#032F62;">celestia_rpc</span><span style="color:#24292E;"> </span><span style="color:#032F62;">celestia_types</span></span></code></pre></div><p>To use the following methods, you will need the node URL and your auth token. To get your auth token, see this <a href="/tutorials/node-tutorial#auth-token">guide</a>. To run your node without an auth token, you can use the <code>--rpc.skip-auth</code> flag when starting your node. This allows you to pass an empty string as your auth token.</p><p>The default URL is <code>http://localhost:26658</code>. If you would like to use subscription methods, such as <code>SubscribeHeaders</code> below, you must use the <code>ws</code> protocol in place of <code>http</code>: <code>ws://localhost:26658</code>.</p><h2 id="submitting-and-retrieving-blobs" tabindex="-1">Submitting and retrieving blobs <a class="header-anchor" href="#submitting-and-retrieving-blobs" aria-label="Permalink to &quot;Submitting and retrieving blobs&quot;">​</a></h2><p>The <a href="https://node-rpc-docs.celestia.org/#blob.Submit" target="_blank" rel="noreferrer">blob.Submit</a> method takes an array of blobs and a gas price, returning the height the blob was successfully posted at.</p><ul><li>The namespace can be generated with <code>Namespace::new_v0</code>.</li><li>The blobs can be generated with <code>Blob::new</code>.</li><li>You can set <code>GasPrice::default()</code> as the gas price to have celestia-node automatically determine an appropriate gas price.</li></ul><p>The <a href="https://node-rpc-docs.celestia.org/#blob.GetAll" target="_blank" rel="noreferrer">blob.GetAll</a> method takes a height and array of namespaces, returning the array of blobs found in the given namespaces.</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">celestia_rpc</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">{</span><span style="color:#B392F0;">BlobClient</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Client</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">HeaderClient</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">ShareClient</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">celestia_types</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">{</span><span style="color:#B392F0;">nmt</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">Namespace</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Blob</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">blob</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">SubmitOptions</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">submit_blob</span><span style="color:#E1E4E8;">(url</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#B392F0;">str</span><span style="color:#E1E4E8;">, token</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#B392F0;">str</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> client </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Client</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">new</span><span style="color:#E1E4E8;">(url, </span><span style="color:#B392F0;">Some</span><span style="color:#E1E4E8;">(token))</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">.await</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Failed creating rpc client&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // let&#39;s use the DEADBEEF namespace</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> namespace </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Namespace</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">new_v0</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">0xDE</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0xAD</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0xBE</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0xEF</span><span style="color:#E1E4E8;">])</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Invalid namespace&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // create a blob</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> blob </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Blob</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">new</span><span style="color:#E1E4E8;">(namespace, </span><span style="color:#9ECBFF;">b&quot;Hello, World!&quot;</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">to_vec</span><span style="color:#E1E4E8;">())</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Blob creation failed&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // submit the blob to the network</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> height </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">blob_submit</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">[blob</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">clone</span><span style="color:#E1E4E8;">()], </span><span style="color:#B392F0;">SubmitOptions</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">default</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">.await</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Failed submitting blob&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">println!</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Blob was included at height {}&quot;</span><span style="color:#E1E4E8;">, height);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // fetch the blob back from the network</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> retrieved_blobs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">blob_get_all</span><span style="color:#E1E4E8;">(height, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">[namespace])</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">.await</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Failed to retrieve blobs&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">assert_eq!</span><span style="color:#E1E4E8;">(retrieved_blobs</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">len</span><span style="color:#E1E4E8;">(), </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">assert_eq!</span><span style="color:#E1E4E8;">(retrieved_blobs[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">data, </span><span style="color:#9ECBFF;">b&quot;Hello, World!&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">assert_eq!</span><span style="color:#E1E4E8;">(retrieved_blobs[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">commitment, blob</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">commitment);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">celestia_rpc</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">{</span><span style="color:#6F42C1;">BlobClient</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Client</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">HeaderClient</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">ShareClient</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">celestia_types</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">{</span><span style="color:#6F42C1;">nmt</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">Namespace</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Blob</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">blob</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">SubmitOptions</span><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">submit_blob</span><span style="color:#24292E;">(url</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#6F42C1;">str</span><span style="color:#24292E;">, token</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#6F42C1;">str</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> client </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Client</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">new</span><span style="color:#24292E;">(url, </span><span style="color:#6F42C1;">Some</span><span style="color:#24292E;">(token))</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">.await</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Failed creating rpc client&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // let&#39;s use the DEADBEEF namespace</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> namespace </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Namespace</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">new_v0</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0xDE</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0xAD</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0xBE</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0xEF</span><span style="color:#24292E;">])</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Invalid namespace&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // create a blob</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> blob </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Blob</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">new</span><span style="color:#24292E;">(namespace, </span><span style="color:#032F62;">b&quot;Hello, World!&quot;</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">to_vec</span><span style="color:#24292E;">())</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Blob creation failed&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // submit the blob to the network</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> height </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">blob_submit</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">[blob</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">clone</span><span style="color:#24292E;">()], </span><span style="color:#6F42C1;">SubmitOptions</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">default</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">.await</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Failed submitting blob&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">println!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Blob was included at height {}&quot;</span><span style="color:#24292E;">, height);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // fetch the blob back from the network</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> retrieved_blobs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">blob_get_all</span><span style="color:#24292E;">(height, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">[namespace])</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">.await</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Failed to retrieve blobs&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">assert_eq!</span><span style="color:#24292E;">(retrieved_blobs</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">len</span><span style="color:#24292E;">(), </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">assert_eq!</span><span style="color:#24292E;">(retrieved_blobs[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">data, </span><span style="color:#032F62;">b&quot;Hello, World!&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">assert_eq!</span><span style="color:#24292E;">(retrieved_blobs[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">commitment, blob</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">commitment);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="subscribing-to-new-headers" tabindex="-1">Subscribing to new headers <a class="header-anchor" href="#subscribing-to-new-headers" aria-label="Permalink to &quot;Subscribing to new headers&quot;">​</a></h2><p>You can subscribe to new headers using the <a href="https://node-rpc-docs.celestia.org/#header.Subscribe" target="_blank" rel="noreferrer">header.Subscribe</a> method. This method returns a <code>Subscription</code> that will receive new headers as they are produced. In this example, we will fetch all blobs at the height of the new header in the <code>0xDEADBEEF</code> namespace.</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">subscribe_headers</span><span style="color:#E1E4E8;">(url</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#B392F0;">str</span><span style="color:#E1E4E8;">, token</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#B392F0;">str</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> client </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Client</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">new</span><span style="color:#E1E4E8;">(url, </span><span style="color:#B392F0;">Some</span><span style="color:#E1E4E8;">(token))</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">.await</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Failed creating rpc client&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> header_sub </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">header_subscribe</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">.await</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Failed subscribing to incoming headers&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // setup the namespace we will filter blobs by</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> namespace </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Namespace</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">new_v0</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">0xDE</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0xAD</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0xBE</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0xEF</span><span style="color:#E1E4E8;">])</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Invalid namespace&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Some</span><span style="color:#E1E4E8;">(extended_header) </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> header_sub</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">.await</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">match</span><span style="color:#E1E4E8;"> extended_header {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">Ok</span><span style="color:#E1E4E8;">(header) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> height </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> header</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">header</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">height</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">                // fetch all blobs at the height of the new header</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> blobs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">match</span><span style="color:#E1E4E8;"> client</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">blob_get_all</span><span style="color:#E1E4E8;">(height, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">[namespace])</span><span style="color:#F97583;">.await</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#B392F0;">Ok</span><span style="color:#E1E4E8;">(blobs) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> blobs,</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#B392F0;">Err</span><span style="color:#E1E4E8;">(e) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#B392F0;">eprintln!</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Error fetching blobs: {}&quot;</span><span style="color:#E1E4E8;">, e);</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">println!</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#9ECBFF;">&quot;Found {} blobs at height {} in the 0xDEADBEEF namespace&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                    blobs</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">len</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">                    height</span></span>
<span class="line"><span style="color:#E1E4E8;">                );</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">Err</span><span style="color:#E1E4E8;">(e) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">eprintln!</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Error receiving header: {}&quot;</span><span style="color:#E1E4E8;">, e);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">subscribe_headers</span><span style="color:#24292E;">(url</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#6F42C1;">str</span><span style="color:#24292E;">, token</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#6F42C1;">str</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> client </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Client</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">new</span><span style="color:#24292E;">(url, </span><span style="color:#6F42C1;">Some</span><span style="color:#24292E;">(token))</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">.await</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Failed creating rpc client&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">mut</span><span style="color:#24292E;"> header_sub </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">header_subscribe</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">.await</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Failed subscribing to incoming headers&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // setup the namespace we will filter blobs by</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> namespace </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Namespace</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">new_v0</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0xDE</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0xAD</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0xBE</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0xEF</span><span style="color:#24292E;">])</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Invalid namespace&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Some</span><span style="color:#24292E;">(extended_header) </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> header_sub</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">.await</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">match</span><span style="color:#24292E;"> extended_header {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">Ok</span><span style="color:#24292E;">(header) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> height </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> header</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">header</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">height</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">                // fetch all blobs at the height of the new header</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> blobs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">match</span><span style="color:#24292E;"> client</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">blob_get_all</span><span style="color:#24292E;">(height, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">[namespace])</span><span style="color:#D73A49;">.await</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6F42C1;">Ok</span><span style="color:#24292E;">(blobs) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> blobs,</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6F42C1;">Err</span><span style="color:#24292E;">(e) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#6F42C1;">eprintln!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Error fetching blobs: {}&quot;</span><span style="color:#24292E;">, e);</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">continue</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">println!</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#032F62;">&quot;Found {} blobs at height {} in the 0xDEADBEEF namespace&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                    blobs</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">len</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">                    height</span></span>
<span class="line"><span style="color:#24292E;">                );</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">Err</span><span style="color:#24292E;">(e) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">eprintln!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Error receiving header: {}&quot;</span><span style="color:#24292E;">, e);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="fetching-an-extended-data-square-eds" tabindex="-1">Fetching an Extended Data Square (EDS) <a class="header-anchor" href="#fetching-an-extended-data-square-eds" aria-label="Permalink to &quot;Fetching an Extended Data Square (EDS)&quot;">​</a></h2><p>You can fetch an <a href="https://celestiaorg.github.io/celestia-app/data_structures.html#erasure-coding" target="_blank" rel="noreferrer">Extended Data Square (EDS)</a> using the <a href="https://node-rpc-docs.celestia.org/#share.GetEDS" target="_blank" rel="noreferrer">share.GetEDS</a> method. This method takes a header and returns the EDS at the given height.</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">get_eds</span><span style="color:#E1E4E8;">(url</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#B392F0;">str</span><span style="color:#E1E4E8;">, token</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#B392F0;">str</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ExtendedDataSquare</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> client </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Client</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">new</span><span style="color:#E1E4E8;">(url, </span><span style="color:#B392F0;">Some</span><span style="color:#E1E4E8;">(token))</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">.await</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Failed creating rpc client&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // first get the header of the block you want to fetch the EDS from</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> latest_header </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">header_local_head</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">.await</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Failed fetching header&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    client</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">share_get_eds</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">latest_header)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">.await</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Failed to get EDS from latest header&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get_eds</span><span style="color:#24292E;">(url</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#6F42C1;">str</span><span style="color:#24292E;">, token</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#6F42C1;">str</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ExtendedDataSquare</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> client </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Client</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">new</span><span style="color:#24292E;">(url, </span><span style="color:#6F42C1;">Some</span><span style="color:#24292E;">(token))</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">.await</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Failed creating rpc client&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // first get the header of the block you want to fetch the EDS from</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> latest_header </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">header_local_head</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">.await</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Failed fetching header&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    client</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">share_get_eds</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">latest_header)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">.await</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Failed to get EDS from latest header&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="api-documentation" tabindex="-1">API documentation <a class="header-anchor" href="#api-documentation" aria-label="Permalink to &quot;API documentation&quot;">​</a></h2><p>To see the full list of available methods, see the <a href="https://node-rpc-docs.celestia.org/" target="_blank" rel="noreferrer">API documentation</a>.</p>`,21)]))}const d=a(o,[["render",e]]);export{F as __pageData,d as default};
