import{_ as a,o as n,c as l,O as e}from"./chunks/framework.6b456e69.js";const h=JSON.parse(`{"title":"Integrate with Blobstream client","description":"Learn how to integrate your L2's offchain logic with Blobstream","frontmatter":{"description":"Learn how to integrate your L2's offchain logic with Blobstream","head":[["meta",{"property":"og:title","content":"Integrate with Blobstream client | Celestia Docs"}],["meta",{"property":"og:description","content":"Learn how to integrate your L2's offchain logic with Blobstream"}]]},"headers":[],"relativePath":"how-to-guides/blobstream-offchain.md","filePath":"how-to-guides/blobstream-offchain.md","lastUpdated":1754588909000}`),o={name:"how-to-guides/blobstream-offchain.md"};function p(t,s,r,c,i,E){return n(),l("div",null,s[0]||(s[0]=[e(`<h1 id="integrate-with-blobstream-client" tabindex="-1">Integrate with Blobstream client <a class="header-anchor" href="#integrate-with-blobstream-client" aria-label="Permalink to &quot;Integrate with Blobstream client&quot;">â€‹</a></h1><h2 id="blobstream-demo-rollup" tabindex="-1">Blobstream demo rollup <a class="header-anchor" href="#blobstream-demo-rollup" aria-label="Permalink to &quot;Blobstream demo rollup&quot;">â€‹</a></h2><p>Rollups can use Blobstream for DA by posting their data to Celestia and then proving that it was posted on Ethereum. This is done identically to how any rollup or user would post data to Celestia. Then, a zero-knowledge proof that Celestia validators have come to consensus on Celestia block headers is generated, and subsequently relayed to Ethereum to the Blobstream smart contract.</p><p>This demo rollup will outline (the outline is not an implementation! Please do not expect to copy and paste this code ðŸ™‚) a very simple Blobstream rollup to illustrate at a high level what this could look like.</p><h2 id="defining-a-chain" tabindex="-1">Defining a chain <a class="header-anchor" href="#defining-a-chain" aria-label="Permalink to &quot;Defining a chain&quot;">â€‹</a></h2><p>The first step to starting a new chain is to define the structure of the commitments that each block consists of.</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Block</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Data is the data of a block that is submitted to Celestia.</span></span>
<span class="line"><span style="color:#E1E4E8;">    Data </span><span style="color:#9ECBFF;">\`json:&quot;Data&quot;\`</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Header is the set of commitments over a block that is submitted to</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Ethereum.</span></span>
<span class="line"><span style="color:#E1E4E8;">    Header </span><span style="color:#9ECBFF;">\`json:&quot;Header&quot;\`</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Data is the data of a block that is submitted to Celestia.</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Data</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Txs []json.RawMessage </span><span style="color:#9ECBFF;">\`json:&quot;txs&quot;\`</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Header is the set of commitments over a block that is submitted to Ethereum.</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Header</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Height             </span><span style="color:#F97583;">uint64</span><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">\`json:&quot;height&quot;\`</span></span>
<span class="line"><span style="color:#E1E4E8;">    Namespace          []</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">\`json:&quot;namespace&quot;\`</span></span>
<span class="line"><span style="color:#E1E4E8;">    PreviousHash       []</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">\`json:&quot;previous_hash&quot;\`</span></span>
<span class="line"><span style="color:#E1E4E8;">    Span               Span      </span><span style="color:#9ECBFF;">\`json:&quot;span&quot;\`</span></span>
<span class="line"><span style="color:#E1E4E8;">    SequencerSignature Signature </span><span style="color:#9ECBFF;">\`json:&quot;sequencer_signature,omitempty&quot;\`</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Block</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Data is the data of a block that is submitted to Celestia.</span></span>
<span class="line"><span style="color:#24292E;">    Data </span><span style="color:#032F62;">\`json:&quot;Data&quot;\`</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Header is the set of commitments over a block that is submitted to</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Ethereum.</span></span>
<span class="line"><span style="color:#24292E;">    Header </span><span style="color:#032F62;">\`json:&quot;Header&quot;\`</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Data is the data of a block that is submitted to Celestia.</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Data</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    Txs []json.RawMessage </span><span style="color:#032F62;">\`json:&quot;txs&quot;\`</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Header is the set of commitments over a block that is submitted to Ethereum.</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Header</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    Height             </span><span style="color:#D73A49;">uint64</span><span style="color:#24292E;">    </span><span style="color:#032F62;">\`json:&quot;height&quot;\`</span></span>
<span class="line"><span style="color:#24292E;">    Namespace          []</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">    </span><span style="color:#032F62;">\`json:&quot;namespace&quot;\`</span></span>
<span class="line"><span style="color:#24292E;">    PreviousHash       []</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">    </span><span style="color:#032F62;">\`json:&quot;previous_hash&quot;\`</span></span>
<span class="line"><span style="color:#24292E;">    Span               Span      </span><span style="color:#032F62;">\`json:&quot;span&quot;\`</span></span>
<span class="line"><span style="color:#24292E;">    SequencerSignature Signature </span><span style="color:#032F62;">\`json:&quot;sequencer_signature,omitempty&quot;\`</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Note the Celestia-specific structures in the header such as the <code>Namespace</code> and the Blobstream-specific structure called the <code>Span</code>. The goal of these structures is to locate the data in the Celestia block so that we can prove that data&#39;s inclusion via Blobstream if needed. Read more in the <a href="https://celestiaorg.github.io/celestia-app/namespace.html" target="_blank" rel="noreferrer">namespace specifications</a>, and you can think of this like a chain ID. Learn more <a href="https://celestiaorg.github.io/celestia-app/shares.html" target="_blank" rel="noreferrer">information about <code>shares</code></a>, which are small pieces of the encoded Celestia block. We use the same encoding here so that the commitments to the rollup block match those committed to by validators in the Celestia data root.</p><p>The <code>Span</code> could take many forms, but in this demo, we will use the following:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Span describes the location of the rollup block data that is posted to</span></span>
<span class="line"><span style="color:#6A737D;">// Celestia. This is important for other nodes to be able to prove that data in</span></span>
<span class="line"><span style="color:#6A737D;">// the Celestia block. This can be thought of as a pointer to some data in the</span></span>
<span class="line"><span style="color:#6A737D;">// Celestia block.</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Span</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// CelestiaHeight is the height of the Celestia block that contains the</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// rollup block data.</span></span>
<span class="line"><span style="color:#E1E4E8;">    CelestiaHeight </span><span style="color:#F97583;">uint64</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`json:&quot;celestia_height&quot;\`</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// DataShareStart is the index of the first share of the rollup block data.</span></span>
<span class="line"><span style="color:#E1E4E8;">    DataShareStart </span><span style="color:#F97583;">uint64</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`json:&quot;share_start&quot;\`</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// DataShareLen is length in shares of the rollup block data. This is used</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// to identify all of the rollup block data in a Celestia block.</span></span>
<span class="line"><span style="color:#E1E4E8;">    DataShareLen </span><span style="color:#F97583;">uint64</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`json:&quot;share_end&quot;\`</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Span describes the location of the rollup block data that is posted to</span></span>
<span class="line"><span style="color:#6A737D;">// Celestia. This is important for other nodes to be able to prove that data in</span></span>
<span class="line"><span style="color:#6A737D;">// the Celestia block. This can be thought of as a pointer to some data in the</span></span>
<span class="line"><span style="color:#6A737D;">// Celestia block.</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Span</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// CelestiaHeight is the height of the Celestia block that contains the</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// rollup block data.</span></span>
<span class="line"><span style="color:#24292E;">    CelestiaHeight </span><span style="color:#D73A49;">uint64</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`json:&quot;celestia_height&quot;\`</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// DataShareStart is the index of the first share of the rollup block data.</span></span>
<span class="line"><span style="color:#24292E;">    DataShareStart </span><span style="color:#D73A49;">uint64</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`json:&quot;share_start&quot;\`</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// DataShareLen is length in shares of the rollup block data. This is used</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// to identify all of the rollup block data in a Celestia block.</span></span>
<span class="line"><span style="color:#24292E;">    DataShareLen </span><span style="color:#D73A49;">uint64</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`json:&quot;share_end&quot;\`</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>We can then define the blockchain as a collection of blocks and some additional information about the chain such as the sequencer address.</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Blockchain</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Blocks           []Block</span></span>
<span class="line"><span style="color:#E1E4E8;">    SequencerAddress []</span><span style="color:#F97583;">byte</span></span>
<span class="line"><span style="color:#E1E4E8;">    Namespace        []</span><span style="color:#F97583;">byte</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Blockchain</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    Blocks           []Block</span></span>
<span class="line"><span style="color:#24292E;">    SequencerAddress []</span><span style="color:#D73A49;">byte</span></span>
<span class="line"><span style="color:#24292E;">    Namespace        []</span><span style="color:#D73A49;">byte</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="rollup-sequencer" tabindex="-1">Rollup sequencer <a class="header-anchor" href="#rollup-sequencer" aria-label="Permalink to &quot;Rollup sequencer&quot;">â€‹</a></h2><p>The rollup sequencer is responsible for creating blocks and, in this demo, writing that data to Celestia and Ethereum. The rollup full node is responsible for reading that data from Celestia and Ethereum and verifying that it follows the protocol rules of that rollup.</p><p>Therefore, we can start by first defining the reading and writing interactions rollup nodes will have with both the Celestia and Ethereum networks. The actual implementations of these interfaces are left as exercises to the reader (ðŸ¤ª). Assume that those implementations of these interfaces are verifying the respective chain. For the connection to Celestia, this would likely mean connecting to a Celestia light node, which can detect faults in consensus such as hidden data. For the connection to Ethereum, this would likely mean running and connecting to a full node. More information on the RPC that is exposed by a Celestia light node can be found <a href="https://node-rpc-docs.celestia.org/" target="_blank" rel="noreferrer">in the RPC documentation</a>. Additionally, if you need more information on how to run a light node, you can <a href="/how-to-guides/light-node">check out the documentation</a>.</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// CelestiaLightNodeClient summarizes the actions that a rollup that uses</span></span>
<span class="line"><span style="color:#6A737D;">// Blobstream for DA would need from a Celestia light node. Note that the actual</span></span>
<span class="line"><span style="color:#6A737D;">// connection to this light node is arbitrary, but would likely involve an RPC</span></span>
<span class="line"><span style="color:#6A737D;">// connection to a Celestia light node.</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CelestiaLightNodeClient</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">GetBlockData</span><span style="color:#E1E4E8;">(Span) (Data, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">SubmitBlockData</span><span style="color:#E1E4E8;">(Data) (Span, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// EthereumClient summarizes the actions that a rollup that uses Blobstream for</span></span>
<span class="line"><span style="color:#6A737D;">// DA would need from an Ethereum client.</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EthereumClient</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// GetLatestRollupHeight returns the height of the latest rollup block by</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// querying the appropriate contract on Ethereum.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">LatestRollupHeight</span><span style="color:#E1E4E8;">() (</span><span style="color:#F97583;">uint64</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// GetHeader returns the rollup header of a specific height.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">GetHeader</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">uint64</span><span style="color:#E1E4E8;">) (Header, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// SubmitHeader submits a header to the rollup bridge contract on Ethereum.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">SubmitHeader</span><span style="color:#E1E4E8;">(Header) </span><span style="color:#F97583;">error</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// CelestiaLightNodeClient summarizes the actions that a rollup that uses</span></span>
<span class="line"><span style="color:#6A737D;">// Blobstream for DA would need from a Celestia light node. Note that the actual</span></span>
<span class="line"><span style="color:#6A737D;">// connection to this light node is arbitrary, but would likely involve an RPC</span></span>
<span class="line"><span style="color:#6A737D;">// connection to a Celestia light node.</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CelestiaLightNodeClient</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">GetBlockData</span><span style="color:#24292E;">(Span) (Data, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">SubmitBlockData</span><span style="color:#24292E;">(Data) (Span, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// EthereumClient summarizes the actions that a rollup that uses Blobstream for</span></span>
<span class="line"><span style="color:#6A737D;">// DA would need from an Ethereum client.</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EthereumClient</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// GetLatestRollupHeight returns the height of the latest rollup block by</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// querying the appropriate contract on Ethereum.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">LatestRollupHeight</span><span style="color:#24292E;">() (</span><span style="color:#D73A49;">uint64</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// GetHeader returns the rollup header of a specific height.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">GetHeader</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">uint64</span><span style="color:#24292E;">) (Header, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// SubmitHeader submits a header to the rollup bridge contract on Ethereum.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">SubmitHeader</span><span style="color:#24292E;">(Header) </span><span style="color:#D73A49;">error</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Note that here we are waiting for the head to be posted to Ethereum, however, it would likely be better to simply download that header from the p2p network or directly from the sequencer instead.</p><p>For the purposes of this demo, we will be using a single centralized sequencer, which can be defined by simply wrapping the full node to isolate the logic to create blocks.</p><p>A rollup full node will just consist of some representation of a blockchain along with clients to read from with Celestia and Ethereum.</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Fullnode</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Blockchain</span></span>
<span class="line"><span style="color:#E1E4E8;">    CelestiaLightNodeClient</span></span>
<span class="line"><span style="color:#E1E4E8;">    EthereumClient</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Sequencer wraps the demo Fullnode struct to add specific functionality for</span></span>
<span class="line"><span style="color:#6A737D;">// producing blocks.</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Sequencer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Fullnode</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Fullnode</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    Blockchain</span></span>
<span class="line"><span style="color:#24292E;">    CelestiaLightNodeClient</span></span>
<span class="line"><span style="color:#24292E;">    EthereumClient</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Sequencer wraps the demo Fullnode struct to add specific functionality for</span></span>
<span class="line"><span style="color:#6A737D;">// producing blocks.</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Sequencer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    Fullnode</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="committing-to-data" tabindex="-1">Committing to data <a class="header-anchor" href="#committing-to-data" aria-label="Permalink to &quot;Committing to data&quot;">â€‹</a></h3><p>Typical blockchains commit to the transactions included in each block using a Merkle root. Rollups that use Blobstream for DA need to use the commitments that are relayed to the Blobstream contracts.</p><p>For optimistic rollups, this could be as simple as referencing the data in the Celestia block, not unlike using a pointer in memory. This is what is done below via a <code>Span</code> in the <a href="#creating-blocks">creating blocks</a> section. We keep track of where the data is located in the Celestia block and the sequencer signs over that location in the header. If the sequencer commits to non-existent data or an invalid state root, then the invalid transaction is first proved to be included in the <code>Span</code> before the rest of the fraud proof process is followed. Find more information <a href="https://github.com/celestiaorg/blobstream-contracts/blob/v3.0.0/docs/inclusion-proofs.md#blobstream-fraud-proofs" target="_blank" rel="noreferrer">in the inclusion proofs documentation</a>.</p><p>For zk rollups, this would involve creating an inclusion proof to the data root tuple root in the Blobstream contracts and then verifying that proof in the zk proof used to verify state. Find more information in the <a href="https://github.com/celestiaorg/blobstream-contracts/blob/master/docs/inclusion-proofs.md#1-data-root-inclusion-proof" target="_blank" rel="noreferrer">data root inclusion proof documentation</a>.</p><p>Also, see the documentation for the <a href="https://github.com/celestiaorg/celestia-app/blob/v1.1.0/specs/src/specs/data_square_layout.md" target="_blank" rel="noreferrer">data square layout</a> and the <a href="https://github.com/celestiaorg/celestia-app/blob/main/specs/src/shares.md" target="_blank" rel="noreferrer">shares</a> of the Celestia block to see how the data is encoded in Celestia.</p><h3 id="creating-blocks" tabindex="-1">Creating blocks <a class="header-anchor" href="#creating-blocks" aria-label="Permalink to &quot;Creating blocks&quot;">â€‹</a></h3><p>The first step in creating a block is to post the block data to Celestia. Upon confirmation of the data being included in a block, the actual location of the data in Celestia can be determined. This data is used to create a <code>Span</code> which is included in the header and signed over by the sequencer. This <code>Span</code> can be used by contracts on Ethereum that use the Blobstream contracts to prove some specific data was included.</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (s </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">Sequencer) </span><span style="color:#B392F0;">ProduceBlock</span><span style="color:#E1E4E8;">(txs []json.RawMessage) (Block, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    data </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> Data{Txs: txs}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    span, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> s.CelestiaLightNodeClient.</span><span style="color:#79B8FF;">SubmitBlockData</span><span style="color:#E1E4E8;">(data)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Block{}, err</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> lastBlock Block</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(s.Blocks) </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        lastBlock </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> s.Blocks[</span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(s.Blocks)</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    header </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> Header{</span></span>
<span class="line"><span style="color:#E1E4E8;">        Height:       </span><span style="color:#79B8FF;">uint64</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(s.Blocks) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">        PreviousHash: lastBlock.Header.</span><span style="color:#79B8FF;">Hash</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">        Namespace:     s.Namespace,</span></span>
<span class="line"><span style="color:#E1E4E8;">        Span: span,</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    signature </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> s.key.</span><span style="color:#79B8FF;">Sign</span><span style="color:#E1E4E8;">(header.</span><span style="color:#79B8FF;">SignBytes</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    header.SequencerSignature </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> signature</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    block </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> Block{</span></span>
<span class="line"><span style="color:#E1E4E8;">        Data:   data,</span></span>
<span class="line"><span style="color:#E1E4E8;">        Header: header,</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    s.</span><span style="color:#79B8FF;">AddBlock</span><span style="color:#E1E4E8;">(block)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> block, </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (s </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">Sequencer) </span><span style="color:#6F42C1;">ProduceBlock</span><span style="color:#24292E;">(txs []json.RawMessage) (Block, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    data </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> Data{Txs: txs}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    span, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> s.CelestiaLightNodeClient.</span><span style="color:#005CC5;">SubmitBlockData</span><span style="color:#24292E;">(data)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Block{}, err</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> lastBlock Block</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(s.Blocks) </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        lastBlock </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s.Blocks[</span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(s.Blocks)</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    header </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> Header{</span></span>
<span class="line"><span style="color:#24292E;">        Height:       </span><span style="color:#005CC5;">uint64</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(s.Blocks) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">        PreviousHash: lastBlock.Header.</span><span style="color:#005CC5;">Hash</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">        Namespace:     s.Namespace,</span></span>
<span class="line"><span style="color:#24292E;">        Span: span,</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    signature </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> s.key.</span><span style="color:#005CC5;">Sign</span><span style="color:#24292E;">(header.</span><span style="color:#005CC5;">SignBytes</span><span style="color:#24292E;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    header.SequencerSignature </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> signature</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    block </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> Block{</span></span>
<span class="line"><span style="color:#24292E;">        Data:   data,</span></span>
<span class="line"><span style="color:#24292E;">        Header: header,</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    s.</span><span style="color:#005CC5;">AddBlock</span><span style="color:#24292E;">(block)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> block, </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Note that the sequencer here is not yet posting headers to Ethereum. This is because the sequencer is waiting for the commitments from the Celestia validator set (the data root tuple roots) to be relayed to the contracts. Once the contracts are updated, the sequencer can post the header to Ethereum.</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (s </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">Sequencer) </span><span style="color:#B392F0;">UpdateHeaders</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    latestRollupHeight, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> s.EthereumClient.</span><span style="color:#79B8FF;">LatestRollupHeight</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> latestRollupHeight; i </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">uint64</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(s.Blocks)</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">); i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> s.EthereumClient.</span><span style="color:#79B8FF;">SubmitHeader</span><span style="color:#E1E4E8;">(s.Blocks[i].Header)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (s </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">Sequencer) </span><span style="color:#6F42C1;">UpdateHeaders</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">error</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    latestRollupHeight, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> s.EthereumClient.</span><span style="color:#005CC5;">LatestRollupHeight</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> latestRollupHeight; i </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">uint64</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(s.Blocks)</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">); i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> s.EthereumClient.</span><span style="color:#005CC5;">SubmitHeader</span><span style="color:#24292E;">(s.Blocks[i].Header)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="rollup-full-node" tabindex="-1">Rollup full node <a class="header-anchor" href="#rollup-full-node" aria-label="Permalink to &quot;Rollup full node&quot;">â€‹</a></h2><h3 id="downloading-the-block" tabindex="-1">Downloading the block <a class="header-anchor" href="#downloading-the-block" aria-label="Permalink to &quot;Downloading the block&quot;">â€‹</a></h3><p>There are a few different mechanisms that could be used to download blocks. The simplest solution and what is outlined above is for <code>Fullnodes</code> to wait until the blocks and the headers are posted to the respective chains, and then download each as they are posted. It would also be possible to gossip the headers ahead of time and download the rollup blocks from Celestia instead of waiting for the headers to be posted to Ethereum. It&#39;s also possible to download the headers and the block data like a normal blockchain via a gossiping network and only fall back to downloading the data and headers from Celestia and Ethereum if the gossiping network is unavailable or the sequencer is malicious.</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (f </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">Fullnode) </span><span style="color:#B392F0;">AddBlock</span><span style="color:#E1E4E8;">(b Block) </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Perform validation of the block</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> b.Header.Height </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">uint64</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(f.Blocks)</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;failure to add block: expected block height </span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;">, got </span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(f.Blocks)</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, b.Header.Height)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Check the sequencer&#39;s signature</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">b.Header.SequencerSignature.</span><span style="color:#79B8FF;">IsValid</span><span style="color:#E1E4E8;">(f.SequencerAddress) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;failure to add block: invalid sequencer signature&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    f.Blocks </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">append</span><span style="color:#E1E4E8;">(f.Blocks, b)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (f </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">Fullnode) </span><span style="color:#B392F0;">GetLatestBlock</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    nextHeight </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">uint64</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(f.Blocks) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Download the next header from ethereum before we download the block data</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// from Celestia. Note that we could alternatively download the header</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// directly from the sequencer instead of waiting.</span></span>
<span class="line"><span style="color:#E1E4E8;">    header, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> f.EthereumClient.</span><span style="color:#79B8FF;">GetHeader</span><span style="color:#E1E4E8;">(nextHeight)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    data, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> f.CelestiaLightNodeClient.</span><span style="color:#79B8FF;">GetBlockData</span><span style="color:#E1E4E8;">(header.Span)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> f.</span><span style="color:#79B8FF;">AddBlock</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        Block{</span></span>
<span class="line"><span style="color:#E1E4E8;">            Data:   data,</span></span>
<span class="line"><span style="color:#E1E4E8;">            Header: header,</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (f </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">Fullnode) </span><span style="color:#6F42C1;">AddBlock</span><span style="color:#24292E;">(b Block) </span><span style="color:#D73A49;">error</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Perform validation of the block</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> b.Header.Height </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">uint64</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(f.Blocks)</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;failure to add block: expected block height </span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">, got </span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(f.Blocks)</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, b.Header.Height)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Check the sequencer&#39;s signature</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">b.Header.SequencerSignature.</span><span style="color:#005CC5;">IsValid</span><span style="color:#24292E;">(f.SequencerAddress) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;failure to add block: invalid sequencer signature&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    f.Blocks </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">append</span><span style="color:#24292E;">(f.Blocks, b)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (f </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">Fullnode) </span><span style="color:#6F42C1;">GetLatestBlock</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">error</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    nextHeight </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">uint64</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(f.Blocks) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Download the next header from ethereum before we download the block data</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// from Celestia. Note that we could alternatively download the header</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// directly from the sequencer instead of waiting.</span></span>
<span class="line"><span style="color:#24292E;">    header, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> f.EthereumClient.</span><span style="color:#005CC5;">GetHeader</span><span style="color:#24292E;">(nextHeight)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    data, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> f.CelestiaLightNodeClient.</span><span style="color:#005CC5;">GetBlockData</span><span style="color:#24292E;">(header.Span)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> f.</span><span style="color:#005CC5;">AddBlock</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        Block{</span></span>
<span class="line"><span style="color:#24292E;">            Data:   data,</span></span>
<span class="line"><span style="color:#24292E;">            Header: header,</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>This outline of a Blobstream rollup isn&#39;t doing execution or state transitions induced by the transactions, however, that step would occur here. If fraud is detected, the fraud proof process will begin. The only difference between the fraud proof process of a normal optimistic rollup and a rollup that uses Blobstream for DA is that the full node would first prove the fraudulent transaction was committed to by the Sequencer using the <code>Span</code> in the header and before proceeding with the normal process.</p><h3 id="more-documentation" tabindex="-1">More documentation <a class="header-anchor" href="#more-documentation" aria-label="Permalink to &quot;More documentation&quot;">â€‹</a></h3><h4 id="proving-inclusion-via-blobstream" tabindex="-1">Proving inclusion via Blobstream <a class="header-anchor" href="#proving-inclusion-via-blobstream" aria-label="Permalink to &quot;Proving inclusion via Blobstream&quot;">â€‹</a></h4><p><a href="https://github.com/celestiaorg/blobstream-contracts/blob/v3.0.0/docs/inclusion-proofs.md" target="_blank" rel="noreferrer">Blobstream inclusion proof docs</a> and the <a href="https://github.com/celestiaorg/blobstream-contracts/blob/v3.0.0/src/lib/verifier/DAVerifier.sol" target="_blank" rel="noreferrer">verifier helper</a> contracts.</p><h4 id="submitting-block-data-to-celestia-via-light-node" tabindex="-1">Submitting block data to Celestia via light node <a class="header-anchor" href="#submitting-block-data-to-celestia-via-light-node" aria-label="Permalink to &quot;Submitting block data to Celestia via light node&quot;">â€‹</a></h4><p>As linked above, use the <a href="https://node-rpc-docs.celestia.org/#blob.Submit" target="_blank" rel="noreferrer">Celestia light node RPC</a> to submit the data to Celestia.</p><h4 id="posting-headers-to-ethereum" tabindex="-1">Posting headers to Ethereum <a class="header-anchor" href="#posting-headers-to-ethereum" aria-label="Permalink to &quot;Posting headers to Ethereum&quot;">â€‹</a></h4><p>How headers are posted to Ethereum is entirely dependent upon how the rollup light client contracts work. For examples of interacting with the Ethereum blockchain programmatically, please see the <a href="https://goethereumbook.org/en/transactions/" target="_blank" rel="noreferrer">go-ethereum book</a> or one of the many other resources for <a href="https://github.com/ethereumbook/ethereumbook/blob/first_edition_first_print/06transactions.asciidoc" target="_blank" rel="noreferrer">submitting transactions</a> or <a href="https://github.com/ethereumbook/ethereumbook/blob/first_edition_first_print/07smart-contracts-solidity.asciidoc" target="_blank" rel="noreferrer">writing contracts</a>.</p>`,42)]))}const d=a(o,[["render",p]]);export{h as __pageData,d as default};
