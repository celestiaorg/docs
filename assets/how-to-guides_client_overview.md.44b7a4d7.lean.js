import{_ as t,o as i,c as o,O as n}from"./chunks/framework.6b456e69.js";const p=JSON.parse('{"title":"Celestia transaction client overview","description":"","frontmatter":{"head":[["meta",{"property":"og:title","content":"Celestia transaction client overview | Celestia Docs"}],["meta",{"property":"og:description","content":"The first modular blockchain network."}]]},"headers":[],"relativePath":"how-to-guides/client/overview.md","filePath":"how-to-guides/client/overview.md","lastUpdated":1761232642000}'),a={name:"how-to-guides/client/overview.md"};function r(s,e,l,d,c,u){return i(),o("div",null,e[0]||(e[0]=[n('<h1 id="celestia-transaction-client-overview" tabindex="-1">Celestia transaction client overview <a class="header-anchor" href="#celestia-transaction-client-overview" aria-label="Permalink to &quot;Celestia transaction client overview&quot;">​</a></h1><p>The Celestia transaction (tx) client enables developers and applications to read from and submit data to Celestia nodes without running their own node infrastructure.</p><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>The Celestia transaction client provides a streamlined API for two key purposes:</p><ul><li><strong>Reading data</strong> (via bridge nodes).</li><li><strong>Submitting transactions</strong> (via core/consensus nodes).</li></ul><h2 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-label="Permalink to &quot;Features&quot;">​</a></h2><ul><li><strong>Read operations:</strong> Retrieve blobs, headers, and shares.</li><li><strong>Submit operations:</strong> Submit data blobs to the Celestia network.</li><li><strong>State queries:</strong> Check account balances.</li><li><strong>Key management:</strong> Simplified keyring integration.</li><li><strong>Flexible modes:</strong><ul><li><strong>Read-only</strong> (Bridge nodes)</li><li><strong>Full client</strong> (Bridge + Core nodes)</li></ul></li></ul><h2 id="clients" tabindex="-1">Clients <a class="header-anchor" href="#clients" aria-label="Permalink to &quot;Clients&quot;">​</a></h2><p>There are currently two client implementations in progress:</p><ul><li><a href="/how-to-guides/client/go">Go client</a>: The primary and most stable client is written in Go. It supports full blob submission and retrieval flows.</li><li>Rust client: This client is a work in progress. It is being designed to offer a similar developer experience for Rust users.</li></ul><h2 id="understanding-read-vs-submit-endpoints" tabindex="-1">Understanding read vs submit endpoints <a class="header-anchor" href="#understanding-read-vs-submit-endpoints" aria-label="Permalink to &quot;Understanding read vs submit endpoints&quot;">​</a></h2><p>The Celestia client is split into two key parts under the hood — one for <strong>reading data</strong>, and another for <strong>submitting data</strong> — and each needs a different type of node connection.</p><table><thead><tr><th>Purpose</th><th>Node type required</th><th>Example endpoint</th></tr></thead><tbody><tr><td>Reading blobs/headers</td><td>Bridge node</td><td><code>https://your-quicknode-url.celestia-mocha.quiknode.pro/&lt;token&gt;</code> or <code>http://localhost:26658</code></td></tr><tr><td>Submitting blobs/txs</td><td>Consensus node (Core)</td><td><code>your-quicknode-url.celestia-mocha.quiknode.pro:9090</code> or <code>celestia-testnet-consensus.itrocket.net:9090</code></td></tr></tbody></table><h2 id="security-tips" tabindex="-1">Security tips <a class="header-anchor" href="#security-tips" aria-label="Permalink to &quot;Security tips&quot;">​</a></h2><ul><li>Always enable TLS when using authentication tokens.</li><li>Do not manually set both <code>DAAuthToken</code> and <code>gRPC</code> Authorization headers.</li><li>Use file-backed keyrings (BackendFile) for production use.</li></ul>',15)]))}const g=t(a,[["render",r]]);export{p as __pageData,g as default};
