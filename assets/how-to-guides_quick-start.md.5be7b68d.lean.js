import{c as t}from"./chunks/constants.c56ae276.js";import{m as p}from"./chunks/mocha_versions.020c2c67.js";import{o as r,c,O as o,k as a,t as n,l as e,a as l}from"./chunks/framework.6b456e69.js";const i={class:"language-bash vp-adaptive-theme"},y={class:"shiki github-dark vp-code-dark"},E={class:"line"},d={style:{color:"#9ECBFF"}},h={class:"shiki github-light vp-code-light"},u={class:"line"},F={style:{color:"#032F62"}},g={class:"language-bash vp-adaptive-theme"},C={class:"shiki github-dark vp-code-dark"},b={class:"line"},m={style:{color:"#9ECBFF"}},B={class:"line"},k={style:{color:"#9ECBFF"}},v={class:"line"},f={style:{color:"#9ECBFF"}},q={class:"shiki github-light vp-code-light"},w={class:"line"},_={style:{color:"#032F62"}},S={class:"line"},A={style:{color:"#032F62"}},T={class:"line"},x={style:{color:"#032F62"}},I={class:"language-bash vp-adaptive-theme"},D={class:"shiki github-dark vp-code-dark"},N={class:"line"},H={style:{color:"#9ECBFF"}},O={class:"line"},R={style:{color:"#9ECBFF"}},P={class:"shiki github-light vp-code-light"},U={class:"line"},L={style:{color:"#032F62"}},z={class:"line"},G={style:{color:"#032F62"}},$=JSON.parse('{"title":"Quick-start guide","description":"Learn how to get started and post your first blob to Celestia.","frontmatter":{"description":"Learn how to get started and post your first blob to Celestia.","head":[["meta",{"property":"og:title","content":"Quick-start guide | Celestia Docs"}],["meta",{"property":"og:description","content":"Learn how to get started and post your first blob to Celestia."}]]},"headers":[],"relativePath":"how-to-guides/quick-start.md","filePath":"how-to-guides/quick-start.md","lastUpdated":1761691717000}'),j={name:"how-to-guides/quick-start.md"},Q=Object.assign(j,{setup(Y){return(M,s)=>(r(),c("div",null,[s[54]||(s[54]=o('<h1 id="quick-start-guide" tabindex="-1">Quick-start guide <a class="header-anchor" href="#quick-start-guide" aria-label="Permalink to &quot;Quick-start guide&quot;">​</a></h1><p>Welcome to Celestia&#39;s quick-start guide! In this guide, we&#39;ll learn how to run a Celestia data availability sampling (DAS) light node to post and retrieve data blobs on Celestia&#39;s <a href="./mocha-testnet">Mocha testnet</a>.</p><blockquote><p>This is a self-contained tutorial optimized for getting started quickly on Mocha testnet. For complete documentation on installing celestia-node or running light nodes on other networks, see the <a href="/how-to-guides/celestia-node">celestia-node installation guide</a> and <a href="/how-to-guides/light-node">light node guide</a>.</p></blockquote><p>A blob (a.k.a. <a href="https://en.wikipedia.org/wiki/Object_storage#Origins" target="_blank" rel="noreferrer">BLOB</a>) is a Binary Large OBject, which is arbitrary data that you want to post and make available on Celestia&#39;s data availability (DA) layer.</p><p>Your light node will allow you to post data, and then use DAS to sample and retrieve it from the DA network. Let&#39;s get started!</p><h2 id="run-a-light-node" tabindex="-1">Run a light node <a class="header-anchor" href="#run-a-light-node" aria-label="Permalink to &quot;Run a light node&quot;">​</a></h2><p>First we&#39;ll need to install the <code>celestia</code> binary to run our DAS light node. Use the following command to install a pre-built binary of <a href="https://github.com/celestiaorg/celestia-node" target="_blank" rel="noreferrer">celestia-node</a>, for the latest release for Mocha testnet:</p><blockquote><p>For this guide to work out of the box, select either your Go bin or system bin directory when prompted. If you&#39;re curious what <a href="https://github.com/celestiaorg/docs/tree/main/public/celestia-node.sh" target="_blank" rel="noreferrer">the script</a> is doing, check out <a href="/how-to-guides/celestia-node#installing-a-pre-built-binary">the celestia-node page</a>.</p></blockquote>',8)),a("div",i,[s[2]||(s[2]=a("button",{title:"Copy Code",class:"copy"},null,-1)),s[3]||(s[3]=a("span",{class:"lang"},"bash",-1)),a("pre",y,[a("code",null,[a("span",E,[s[0]||(s[0]=o('<span style="color:#B392F0;">bash</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-c</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;$(</span><span style="color:#B392F0;">curl</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">-sL</span><span style="color:#9ECBFF;"> https://raw.githubusercontent.com/celestiaorg/docs/main/public/celestia-node.sh)&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-v</span><span style="color:#E1E4E8;"> </span>',14)),a("span",d,n(e(p)["node-latest-tag"]),1)])])]),a("pre",h,[a("code",null,[a("span",u,[s[1]||(s[1]=o('<span style="color:#6F42C1;">bash</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-c</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;$(</span><span style="color:#6F42C1;">curl</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">-sL</span><span style="color:#032F62;"> https://raw.githubusercontent.com/celestiaorg/docs/main/public/celestia-node.sh)&quot;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> </span>',14)),a("span",F,n(e(p)["node-latest-tag"]),1)])])])]),a("p",null,[s[4]||(s[4]=l("Once you've installed ")),s[5]||(s[5]=a("code",null,"celestia",-1)),s[6]||(s[6]=l(", double-check that you're using the right version (")),a("code",null,n(e(p)["node-latest-tag"]),1),s[7]||(s[7]=l(") by running:"))]),s[55]||(s[55]=o('<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">celestia</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">version</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">celestia</span><span style="color:#24292E;"> </span><span style="color:#032F62;">version</span></span></code></pre></div><p>You should see the version of the binary that you just installed. Use <code>celestia --help</code> to see the CLI menu.</p><h3 id="initialize-the-light-node" tabindex="-1">Initialize the light node <a class="header-anchor" href="#initialize-the-light-node" aria-label="Permalink to &quot;Initialize the light node&quot;">​</a></h3><p>Initializing your light node will set up configuration files and create a keypair for your node.</p><p>The <code>p2p.network</code> flag is used to specify the network you want to connect to. Use <code>mocha</code> for Mocha testnet.</p>',5)),a("blockquote",null,[a("p",null,[s[8]||(s[8]=l("The chain ID ")),a("code",null,n(e(t).mochaChainId),1),s[9]||(s[9]=l(" is also an accepted alias."))])]),s[56]||(s[56]=o('<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">celestia</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">light</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">init</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--p2p.network</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">mocha</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">celestia</span><span style="color:#24292E;"> </span><span style="color:#032F62;">light</span><span style="color:#24292E;"> </span><span style="color:#032F62;">init</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--p2p.network</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mocha</span></span></code></pre></div><p>Once you&#39;ve run this command, you&#39;ll see a new keypair that&#39;s created in your terminal. Be sure to save your mnemonic somewhere safe for future use!</p>',2)),a("div",g,[s[22]||(s[22]=a("button",{title:"Copy Code",class:"copy"},null,-1)),s[23]||(s[23]=a("span",{class:"lang"},"bash",-1)),a("pre",C,[a("code",null,[a("span",b,[s[10]||(s[10]=o('<span style="color:#B392F0;">INFO</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">node</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">nodebuilder/init.go:31</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Initializing</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Light</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Node</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Store</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">over</span><span style="color:#E1E4E8;"> </span>',16)),a("span",m,"'/Users/js/.celestia-light-"+n(e(t).mochaChainId)+"'",1)]),s[13]||(s[13]=l(`
`)),a("span",B,[s[11]||(s[11]=o('<span style="color:#B392F0;">INFO</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">node</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">nodebuilder/init.go:64</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Saved</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">config</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">{&quot;path&quot;:</span><span style="color:#E1E4E8;"> </span>',12)),a("span",k,'"/Users/js/.celestia-light-'+n(e(t).mochaChainId)+'/config.toml"}',1)]),s[14]||(s[14]=o(`
<span class="line"><span style="color:#B392F0;">INFO</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">node</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">nodebuilder/init.go:66</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Accessing</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">keyring...</span></span>
<span class="line"><span style="color:#B392F0;">WARN</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">node</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">nodebuilder/init.go:196</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Detected</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">plaintext</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">keyring</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">backend.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">For</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">elevated</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">security</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">properties,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">consider</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">the</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`</span><span style="color:#B392F0;">file</span><span style="color:#9ECBFF;">\`</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">keyring</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">backend.</span></span>
`,5)),a("span",v,[s[12]||(s[12]=o('<span style="color:#B392F0;">INFO</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">node</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">nodebuilder/init.go:211</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">NO</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">KEY</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">FOUND</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">IN</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">STORE,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">GENERATING</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">NEW</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">KEY...</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">{&quot;path&quot;:</span><span style="color:#E1E4E8;"> </span>',24)),a("span",f,'"/Users/js/.celestia-light-'+n(e(t).mochaChainId)+'/keys"}',1)]),s[15]||(s[15]=o(`
<span class="line"><span style="color:#B392F0;">INFO</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">node</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">nodebuilder/init.go:216</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">NEW</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">KEY</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">GENERATED...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">NAME:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">my_celes_key</span></span>
<span class="line"><span style="color:#B392F0;">ADDRESS:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">celestia1lgvzg4ek9v499pl5vvsvqpquhwfg0jznpwd92m</span></span>
<span class="line"><span style="color:#B392F0;">MNEMONIC</span><span style="color:#E1E4E8;"> (save </span><span style="color:#9ECBFF;">this</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">somewhere</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">safe!!!</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#B392F0;">never</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">gonna</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">give</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">you</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">up</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">never</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">gonna</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">you</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">down</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">never</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">gonna</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">around</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">and</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">desert</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">you</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">never</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">gonna</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">make</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">you</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cry</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">never</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">gonna</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">INFO</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">node</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">nodebuilder/init.go:73</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Node</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Store</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">initialized</span></span>`,16))])]),a("pre",q,[a("code",null,[a("span",w,[s[16]||(s[16]=o('<span style="color:#6F42C1;">INFO</span><span style="color:#24292E;"> </span><span style="color:#032F62;">node</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nodebuilder/init.go:31</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Initializing</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Light</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Node</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Store</span><span style="color:#24292E;"> </span><span style="color:#032F62;">over</span><span style="color:#24292E;"> </span>',16)),a("span",_,"'/Users/js/.celestia-light-"+n(e(t).mochaChainId)+"'",1)]),s[19]||(s[19]=l(`
`)),a("span",S,[s[17]||(s[17]=o('<span style="color:#6F42C1;">INFO</span><span style="color:#24292E;"> </span><span style="color:#032F62;">node</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nodebuilder/init.go:64</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Saved</span><span style="color:#24292E;"> </span><span style="color:#032F62;">config</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{&quot;path&quot;:</span><span style="color:#24292E;"> </span>',12)),a("span",A,'"/Users/js/.celestia-light-'+n(e(t).mochaChainId)+'/config.toml"}',1)]),s[20]||(s[20]=o(`
<span class="line"><span style="color:#6F42C1;">INFO</span><span style="color:#24292E;"> </span><span style="color:#032F62;">node</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nodebuilder/init.go:66</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Accessing</span><span style="color:#24292E;"> </span><span style="color:#032F62;">keyring...</span></span>
<span class="line"><span style="color:#6F42C1;">WARN</span><span style="color:#24292E;"> </span><span style="color:#032F62;">node</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nodebuilder/init.go:196</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Detected</span><span style="color:#24292E;"> </span><span style="color:#032F62;">plaintext</span><span style="color:#24292E;"> </span><span style="color:#032F62;">keyring</span><span style="color:#24292E;"> </span><span style="color:#032F62;">backend.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">For</span><span style="color:#24292E;"> </span><span style="color:#032F62;">elevated</span><span style="color:#24292E;"> </span><span style="color:#032F62;">security</span><span style="color:#24292E;"> </span><span style="color:#032F62;">properties,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">consider</span><span style="color:#24292E;"> </span><span style="color:#032F62;">using</span><span style="color:#24292E;"> </span><span style="color:#032F62;">the</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`</span><span style="color:#6F42C1;">file</span><span style="color:#032F62;">\`</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">keyring</span><span style="color:#24292E;"> </span><span style="color:#032F62;">backend.</span></span>
`,5)),a("span",T,[s[18]||(s[18]=o('<span style="color:#6F42C1;">INFO</span><span style="color:#24292E;"> </span><span style="color:#032F62;">node</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nodebuilder/init.go:211</span><span style="color:#24292E;"> </span><span style="color:#032F62;">NO</span><span style="color:#24292E;"> </span><span style="color:#032F62;">KEY</span><span style="color:#24292E;"> </span><span style="color:#032F62;">FOUND</span><span style="color:#24292E;"> </span><span style="color:#032F62;">IN</span><span style="color:#24292E;"> </span><span style="color:#032F62;">STORE,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">GENERATING</span><span style="color:#24292E;"> </span><span style="color:#032F62;">NEW</span><span style="color:#24292E;"> </span><span style="color:#032F62;">KEY...</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{&quot;path&quot;:</span><span style="color:#24292E;"> </span>',24)),a("span",x,'"/Users/js/.celestia-light-'+n(e(t).mochaChainId)+'/keys"}',1)]),s[21]||(s[21]=o(`
<span class="line"><span style="color:#6F42C1;">INFO</span><span style="color:#24292E;"> </span><span style="color:#032F62;">node</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nodebuilder/init.go:216</span><span style="color:#24292E;"> </span><span style="color:#032F62;">NEW</span><span style="color:#24292E;"> </span><span style="color:#032F62;">KEY</span><span style="color:#24292E;"> </span><span style="color:#032F62;">GENERATED...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">NAME:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">my_celes_key</span></span>
<span class="line"><span style="color:#6F42C1;">ADDRESS:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">celestia1lgvzg4ek9v499pl5vvsvqpquhwfg0jznpwd92m</span></span>
<span class="line"><span style="color:#6F42C1;">MNEMONIC</span><span style="color:#24292E;"> (save </span><span style="color:#032F62;">this</span><span style="color:#24292E;"> </span><span style="color:#032F62;">somewhere</span><span style="color:#24292E;"> </span><span style="color:#032F62;">safe!!!</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#6F42C1;">never</span><span style="color:#24292E;"> </span><span style="color:#032F62;">gonna</span><span style="color:#24292E;"> </span><span style="color:#032F62;">give</span><span style="color:#24292E;"> </span><span style="color:#032F62;">you</span><span style="color:#24292E;"> </span><span style="color:#032F62;">up</span><span style="color:#24292E;"> </span><span style="color:#032F62;">never</span><span style="color:#24292E;"> </span><span style="color:#032F62;">gonna</span><span style="color:#24292E;"> </span><span style="color:#032F62;">let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">you</span><span style="color:#24292E;"> </span><span style="color:#032F62;">down</span><span style="color:#24292E;"> </span><span style="color:#032F62;">never</span><span style="color:#24292E;"> </span><span style="color:#032F62;">gonna</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">around</span><span style="color:#24292E;"> </span><span style="color:#032F62;">and</span><span style="color:#24292E;"> </span><span style="color:#032F62;">desert</span><span style="color:#24292E;"> </span><span style="color:#032F62;">you</span><span style="color:#24292E;"> </span><span style="color:#032F62;">never</span><span style="color:#24292E;"> </span><span style="color:#032F62;">gonna</span><span style="color:#24292E;"> </span><span style="color:#032F62;">make</span><span style="color:#24292E;"> </span><span style="color:#032F62;">you</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cry</span><span style="color:#24292E;"> </span><span style="color:#032F62;">never</span><span style="color:#24292E;"> </span><span style="color:#032F62;">gonna</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">INFO</span><span style="color:#24292E;"> </span><span style="color:#032F62;">node</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nodebuilder/init.go:73</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Node</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Store</span><span style="color:#24292E;"> </span><span style="color:#032F62;">initialized</span></span>`,16))])])]),a("p",null,[s[24]||(s[24]=l("You'll also see in this example, using the Mocha testnet and setting up a light node, our node store will be at: ")),a("code",null,"~/.celestia-light-"+n(e(t).mochaChainId),1),s[25]||(s[25]=l("."))]),s[57]||(s[57]=a("blockquote",null,[a("p",null,"Logs above have the timestamps removed for brevity. And yes, that's a Rickroll mnemonic. 😜")],-1)),s[58]||(s[58]=a("h4",{id:"set-the-trusted-hash",tabindex:"-1"},[l("Set the trusted hash "),a("a",{class:"header-anchor",href:"#set-the-trusted-hash","aria-label":'Permalink to "Set the trusted hash"'},"​")],-1)),s[59]||(s[59]=a("p",null,[l("Setting and syncing to a trusted hash and height means your light node will not sample the entire chain. This is useful when you want to sync your light node quickly. However, it's important to note that this adds the trust assumption that you trust the entity where you get the hash and height from, in this case, the "),a("a",{href:"https://pops.one",target:"_blank",rel:"noreferrer"},"P-OPS"),l(" team's consensus endpoint.")],-1)),s[60]||(s[60]=a("p",null,"Let's set the trusted hash!",-1)),a("ol",null,[s[31]||(s[31]=o('<li><p>Get trusted height &amp; hash from the P-OPS consensus endpoint:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">read</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-r</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">TRUSTED_HEIGHT</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">TRUSTED_HASH</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;&lt;&lt;</span><span style="color:#9ECBFF;">&quot;$(</span><span style="color:#B392F0;">curl</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">-s</span><span style="color:#9ECBFF;"> https://rpc-mocha.pops.one/header </span><span style="color:#F97583;">|</span><span style="color:#9ECBFF;"> </span><span style="color:#B392F0;">jq</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">-r</span><span style="color:#9ECBFF;"> &#39;.result.header | &quot;\\(.height) \\(.last_block_id.hash)&quot;&#39;)&quot;</span><span style="color:#E1E4E8;"> &amp;&amp; </span><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">TRUSTED_HEIGHT</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">TRUSTED_HASH</span><span style="color:#E1E4E8;"> &amp;&amp; </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Height: </span><span style="color:#E1E4E8;">$TRUSTED_HEIGHT</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> &amp;&amp; </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Hash:   </span><span style="color:#E1E4E8;">$TRUSTED_HASH</span><span style="color:#9ECBFF;">&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">read</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-r</span><span style="color:#24292E;"> </span><span style="color:#032F62;">TRUSTED_HEIGHT</span><span style="color:#24292E;"> </span><span style="color:#032F62;">TRUSTED_HASH</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;&lt;</span><span style="color:#032F62;">&quot;$(</span><span style="color:#6F42C1;">curl</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">-s</span><span style="color:#032F62;"> https://rpc-mocha.pops.one/header </span><span style="color:#D73A49;">|</span><span style="color:#032F62;"> </span><span style="color:#6F42C1;">jq</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">-r</span><span style="color:#032F62;"> &#39;.result.header | &quot;\\(.height) \\(.last_block_id.hash)&quot;&#39;)&quot;</span><span style="color:#24292E;"> &amp;&amp; </span><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#032F62;">TRUSTED_HEIGHT</span><span style="color:#24292E;"> </span><span style="color:#032F62;">TRUSTED_HASH</span><span style="color:#24292E;"> &amp;&amp; </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Height: </span><span style="color:#24292E;">$TRUSTED_HEIGHT</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> &amp;&amp; </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Hash:   </span><span style="color:#24292E;">$TRUSTED_HASH</span><span style="color:#032F62;">&quot;</span></span></code></pre></div></li>',1)),a("li",null,[s[30]||(s[30]=a("p",null,"Set the trusted height & hash",-1)),a("ol",null,[a("li",null,[s[26]||(s[26]=l("Open your ")),s[27]||(s[27]=a("code",null,"config.toml",-1)),s[28]||(s[28]=l(" at ")),a("code",null,"~/.celestia-light-"+n(e(t).mochaChainId)+"/config.toml",1)]),s[29]||(s[29]=o("<li>Set <code>Header.Syncer.SyncFromHeight</code> to the trusted height (e.g. <code>SyncFromHeight = 123456</code>)</li><li>Set <code>Header.Syncer.SyncFromHash</code> to the trusted hash (e.g. <code>SyncFromHash = &quot;E8BD0C48260C496BB7A4D8D1E7BDBF1F26A2FE3CF5714DECE1741B2FFB3C095C&quot;</code>, with <strong>no <code>0x</code> prefix</strong>)</li>",2))])])]),s[61]||(s[61]=o('<blockquote><p>If you don&#39;t do this, when trying to retrieve data in a few minutes, you&#39;ll see a response saying <code>&quot;result&quot;: &quot;header: syncing in progress: localHeadHeight: 94721, requestedHeight: 2983850&quot;</code>. You&#39;ll either need to let the node sync to the <code>requestedHeight</code>, or use quick sync with trusted hash to do this. Learn more in <a href="/how-to-guides/celestia-node-trusted-hash">the trusted hash quick sync guide</a>.</p></blockquote><div class="warning custom-block"><p class="custom-block-title">Historical Queries</p><p>Default light nodes no longer support historical queries. By default, nodes maintain a sliding window of headers, bounded by Tail and Head headers. Requests with height below the Tail are rejected (This is, however, temporary, and lazy header fetching will be available with Backward Sync).</p><p>To retain the ability to request older queries with light nodes, use the new configuration fields to set an absolute header that the node will sync from, either the <code>Header.Syncer.SyncFromHeight</code> or the <code>Header.Syncer.SyncFromHash</code> field.</p></div><h3 id="start-the-light-node" tabindex="-1">Start the light node <a class="header-anchor" href="#start-the-light-node" aria-label="Permalink to &quot;Start the light node&quot;">​</a></h3><p>Run the following command to start your light node:</p><p>In the same terminal you initialized the node store and set the variable for <code>TRUSTED_HASH</code>, start the node with the hash and flag:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">celestia</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">light</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">start</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--p2p.network</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">mocha</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--core.ip</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rpc-mocha.pops.one</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--core.port</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">9090</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">celestia</span><span style="color:#24292E;"> </span><span style="color:#032F62;">light</span><span style="color:#24292E;"> </span><span style="color:#032F62;">start</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--p2p.network</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mocha</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--core.ip</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rpc-mocha.pops.one</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--core.port</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">9090</span></span></code></pre></div><p>The <code>core.ip</code> flag is used to specify the consensus RPC endpoints you want to connect to, this is the same one we got the trusted height and hash from. We&#39;ll use <code>rpc-mocha.pops.one</code> from the P-OPS team for Mocha testnet. The <code>headers.trusted-hash</code> flag will set the trusted hash from the previous section.</p><p>Once you see this in the logs, you&#39;re ready to start posting and retrieving data!</p>',8)),a("div",I,[s[50]||(s[50]=a("button",{title:"Copy Code",class:"copy"},null,-1)),s[51]||(s[51]=a("span",{class:"lang"},"bash",-1)),a("pre",D,[a("code",null,[s[38]||(s[38]=o(`<span class="line"><span style="color:#B392F0;">/_____/</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">/_____/</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">/_____/</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">/_____/</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">/_____/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">Started</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">celestia</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">DA</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">node</span></span>
`,6)),a("span",N,[s[32]||(s[32]=a("span",{style:{color:"#B392F0"}},"node",-1)),s[33]||(s[33]=a("span",{style:{color:"#E1E4E8"}}," ",-1)),s[34]||(s[34]=a("span",{style:{color:"#9ECBFF"}},"version:",-1)),s[35]||(s[35]=a("span",{style:{color:"#E1E4E8"}},"  ",-1)),a("span",H,n(e(p)["node-latest-tag"].slice(1)),1)]),s[39]||(s[39]=o(`
<span class="line"><span style="color:#B392F0;">node</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">type:</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">light</span></span>
`,3)),a("span",O,[s[36]||(s[36]=a("span",{style:{color:"#B392F0"}},"network:",-1)),s[37]||(s[37]=a("span",{style:{color:"#E1E4E8"}},"  ",-1)),a("span",R,n(e(t).mochaChainId),1)]),s[40]||(s[40]=o(`
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">/_____/</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">/_____/</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">/_____/</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">/_____/</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">/_____/</span></span>`,4))])]),a("pre",P,[a("code",null,[s[47]||(s[47]=o(`<span class="line"><span style="color:#6F42C1;">/_____/</span><span style="color:#24292E;">  </span><span style="color:#032F62;">/_____/</span><span style="color:#24292E;">  </span><span style="color:#032F62;">/_____/</span><span style="color:#24292E;">  </span><span style="color:#032F62;">/_____/</span><span style="color:#24292E;">  </span><span style="color:#032F62;">/_____/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">Started</span><span style="color:#24292E;"> </span><span style="color:#032F62;">celestia</span><span style="color:#24292E;"> </span><span style="color:#032F62;">DA</span><span style="color:#24292E;"> </span><span style="color:#032F62;">node</span></span>
`,6)),a("span",U,[s[41]||(s[41]=a("span",{style:{color:"#6F42C1"}},"node",-1)),s[42]||(s[42]=a("span",{style:{color:"#24292E"}}," ",-1)),s[43]||(s[43]=a("span",{style:{color:"#032F62"}},"version:",-1)),s[44]||(s[44]=a("span",{style:{color:"#24292E"}},"  ",-1)),a("span",L,n(e(p)["node-latest-tag"].slice(1)),1)]),s[48]||(s[48]=o(`
<span class="line"><span style="color:#6F42C1;">node</span><span style="color:#24292E;"> </span><span style="color:#032F62;">type:</span><span style="color:#24292E;">  </span><span style="color:#032F62;">light</span></span>
`,3)),a("span",z,[s[45]||(s[45]=a("span",{style:{color:"#6F42C1"}},"network:",-1)),s[46]||(s[46]=a("span",{style:{color:"#24292E"}},"  ",-1)),a("span",G,n(e(t).mochaChainId),1)]),s[49]||(s[49]=o(`
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">/_____/</span><span style="color:#24292E;">  </span><span style="color:#032F62;">/_____/</span><span style="color:#24292E;">  </span><span style="color:#032F62;">/_____/</span><span style="color:#24292E;">  </span><span style="color:#032F62;">/_____/</span><span style="color:#24292E;">  </span><span style="color:#032F62;">/_____/</span></span>`,4))])])]),s[62]||(s[62]=o(`<div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If you want to see that your node is synced, use the <code>celestia das sampling-stats</code> command to check it in another terminal. Here is how a fully synced node looks like:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">&quot;result&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">&quot;head_of_sampled_chain&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2990507</span><span style="color:#9ECBFF;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">&quot;head_of_catchup&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2990507</span><span style="color:#9ECBFF;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">&quot;network_head_height&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2990507</span><span style="color:#9ECBFF;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">&quot;concurrency&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#9ECBFF;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">&quot;catch_up_done&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#9ECBFF;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">&quot;is_running&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">&quot;result&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">&quot;head_of_sampled_chain&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2990507</span><span style="color:#032F62;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">&quot;head_of_catchup&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2990507</span><span style="color:#032F62;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">&quot;network_head_height&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2990507</span><span style="color:#032F62;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">&quot;concurrency&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#032F62;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">&quot;catch_up_done&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#032F62;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">&quot;is_running&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></div><h2 id="post-and-retrieve-data-with-your-light-node" tabindex="-1">Post and retrieve data with your light node <a class="header-anchor" href="#post-and-retrieve-data-with-your-light-node" aria-label="Permalink to &quot;Post and retrieve data with your light node&quot;">​</a></h2><h3 id="funding-your-light-node" tabindex="-1">Funding your light node <a class="header-anchor" href="#funding-your-light-node" aria-label="Permalink to &quot;Funding your light node&quot;">​</a></h3><p>Now, we&#39;re almost ready to start posting data!</p><p>Open a second terminal instance for the remainder of this guide. Let&#39;s find our address for the node we have running by running:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">celestia</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">state</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">account-address</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">celestia</span><span style="color:#24292E;"> </span><span style="color:#032F62;">state</span><span style="color:#24292E;"> </span><span style="color:#032F62;">account-address</span></span></code></pre></div><p>Take this account address and head over to the <a href="https://discord.gg/celestiacommunity" target="_blank" rel="noreferrer">Discord</a> and request tokens from the <code>#mocha-faucet</code> channel.</p><p>Once you&#39;ve requested tokens, you can check the balance of your running node using:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">celestia</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">state</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">balance</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">celestia</span><span style="color:#24292E;"> </span><span style="color:#032F62;">state</span><span style="color:#24292E;"> </span><span style="color:#032F62;">balance</span></span></code></pre></div><h3 id="posting-data" tabindex="-1">Posting data <a class="header-anchor" href="#posting-data" aria-label="Permalink to &quot;Posting data&quot;">​</a></h3><p>Now that you have tokens in your account, you can post data to the network. Let&#39;s break down the arguments you&#39;ll provide to the CLI:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">celestia</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">blob</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">submit</span><span style="color:#E1E4E8;"> [namespace] [blobData]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">celestia</span><span style="color:#24292E;"> </span><span style="color:#032F62;">blob</span><span style="color:#24292E;"> </span><span style="color:#032F62;">submit</span><span style="color:#24292E;"> [namespace] [blobData]</span></span></code></pre></div><p>The <code>[namespace]</code> is a permissionless way to categorize your data on Celestia. In other words, it&#39;s a channel for you to post your data. For example, this could be the name of your project or a category for the type of blob. In this example, we&#39;ll use <code>0x71756f746573</code> as the namespace, which is the hex encoding of &quot;quotes&quot;. See the <a href="https://mocha.celenium.io/namespace/0000000000000000000000000000000000000000000071756f746573?tab=Blobs" target="_blank" rel="noreferrer">&quot;quotes&quot; namespace on Celenium</a>.</p><blockquote><p>Learn more about namespaces in <a href="https://celestiaorg.github.io/celestia-app/namespace.html" target="_blank" rel="noreferrer">the celestia-app documentation</a>.</p></blockquote><p>The <code>[blobData]</code> is the blob data you want to post to the network. In this example, we&#39;ll use a quote from Leonardo da Vinci:</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Feeling creative? Post your favorite quote and <a href="https://x.com/JoshCStein/status/1849553273470263636" target="_blank" rel="noreferrer">share it on Twitter</a>!</p></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">celestia</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">blob</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">submit</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0x71756f746573</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&quot;Simplicity is the ultimate sophistication.&quot; -Leonardo da Vinci&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">celestia</span><span style="color:#24292E;"> </span><span style="color:#032F62;">blob</span><span style="color:#24292E;"> </span><span style="color:#032F62;">submit</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0x71756f746573</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&quot;Simplicity is the ultimate sophistication.&quot; -Leonardo da Vinci&#39;</span></span></code></pre></div><p>Once you run this command, you&#39;ll see a height and data commitment in the response. This means your data has been successfully posted to the network!</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">&quot;result&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">&quot;height&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2990556</span><span style="color:#9ECBFF;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">&quot;commitments&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">&quot;0x715ab246772c923104c556dc28d5d4fcfca0398b0a252bcd19dd5705495756ac&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">&quot;result&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">&quot;height&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2990556</span><span style="color:#032F62;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">&quot;commitments&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">&quot;0x715ab246772c923104c556dc28d5d4fcfca0398b0a252bcd19dd5705495756ac&quot;</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="retrieving-data" tabindex="-1">Retrieving data <a class="header-anchor" href="#retrieving-data" aria-label="Permalink to &quot;Retrieving data&quot;">​</a></h3><p>To retrieve the data you posted, use the following command:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">celestia</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">blob</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">get</span><span style="color:#E1E4E8;"> [height] [namespace] [commitment]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">celestia</span><span style="color:#24292E;"> </span><span style="color:#032F62;">blob</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get</span><span style="color:#24292E;"> [height] [namespace] [commitment]</span></span></code></pre></div><p>In this example, you&#39;ll use the height and commitment from the response above:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">celestia</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">blob</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2990556</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0x71756f746573</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0x715ab246772c923104c556dc28d5d4fcfca0398b0a252bcd19dd5705495756ac</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">celestia</span><span style="color:#24292E;"> </span><span style="color:#032F62;">blob</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2990556</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0x71756f746573</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0x715ab246772c923104c556dc28d5d4fcfca0398b0a252bcd19dd5705495756ac</span></span></code></pre></div><p>In response, you&#39;ll see the data you posted:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">&quot;result&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">&quot;namespace&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;0x71756f746573&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">&quot;data&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">Simplicity is the ultimate sophistication.</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;"> -Leonardo da Vinci&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">&quot;share_version&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#9ECBFF;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">&quot;commitment&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;0x715ab246772c923104c556dc28d5d4fcfca0398b0a252bcd19dd5705495756ac&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">&quot;index&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">29</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">&quot;result&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">&quot;namespace&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;0x71756f746573&quot;,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">&quot;data&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">Simplicity is the ultimate sophistication.</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;"> -Leonardo da Vinci&quot;,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">&quot;share_version&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#032F62;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">&quot;commitment&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;0x715ab246772c923104c556dc28d5d4fcfca0398b0a252bcd19dd5705495756ac&quot;,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">&quot;index&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">29</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>You can also inspect this example on celenium explorer <a href="https://mocha.celenium.io/blob?commitment=cVqyRncskjEExVbcKNXU/PygOYsKJSvNGd1XBUlXVqw=&amp;hash=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABxdW90ZXM=&amp;height=2990556" target="_blank" rel="noreferrer">here</a>.</p><p>Let&#39;s break it down:</p><ul><li><code>namespace</code>: The <a href="https://celestiaorg.github.io/celestia-app/namespace.html" target="_blank" rel="noreferrer">namespace</a> you used to categorize your data.</li><li><code>data</code>: The data blob you posted to the network.</li><li><code>share_version</code>: The version of the <a href="https://celestiaorg.github.io/celestia-app/shares.html" target="_blank" rel="noreferrer">share</a>. A share is a fixed-size data chunk that is associated with exactly one namespace.</li><li><code>commitment</code>: The commitment of the data (see <a href="https://celestiaorg.github.io/celestia-app/data_square_layout.html#blob-share-commitment-rules" target="_blank" rel="noreferrer">Blob Share Commitment Rules</a>).</li><li><code>index</code>: The <a href="https://celestiaorg.github.io/celestia-app/shares.html#overview" target="_blank" rel="noreferrer">index</a> of the data share in the square.</li></ul><p>Congratulations! You&#39;ve successfully learned how to run a light node to post and retrieve data from Celestia&#39;s Mocha testnet.</p><h2 id="optional-diving-deeper-into-the-stack" tabindex="-1">Optional: Diving deeper into the stack <a class="header-anchor" href="#optional-diving-deeper-into-the-stack" aria-label="Permalink to &quot;Optional: Diving deeper into the stack&quot;">​</a></h2><p>This section covers some more in-depth topics that you may find useful when working with your Celestia light node. For advanced configurations like running with custom keys, using SystemD, or authentication with core endpoints, see the <a href="/how-to-guides/light-node">light node guide</a>.</p><h3 id="node-store-contents" tabindex="-1">Node store contents <a class="header-anchor" href="#node-store-contents" aria-label="Permalink to &quot;Node store contents&quot;">​</a></h3><p>As described in the <a href="#initialize-the-light-node">initialize the light node section</a> above, the node store is created in the <code>~/.celestia-&lt;node-type&gt;-&lt;network&gt;</code> directory.</p>`,34)),a("p",null,[s[52]||(s[52]=l("In this guide, the node store for ")),a("code",null,"~/.celestia-light-"+n(e(t).mochaChainId),1),s[53]||(s[53]=l(" contains the following directories and file types:"))]),s[63]||(s[63]=o('<ul><li><code>config.toml</code>: Node configuration settings</li><li><code>data/</code>: Contains database files <ul><li><code>.vlog</code> files: Value log files storing actual data</li><li><code>.sst</code> files: Static sorted tables containing indexed data</li><li>System files: <code>DISCARD</code>, <code>KEYREGISTRY</code>, and <code>MANIFEST</code> for database management</li></ul></li><li><code>keys/</code>: Stores node identity and account keys <ul><li>Contains encoded node identifiers</li><li><code>keyring-test/</code>: Test keyring directory <ul><li><code>.address</code> files: Account addresses</li><li><code>.info</code> files: Key metadata and information</li></ul></li></ul></li></ul><h3 id="get-your-auth-token" tabindex="-1">Get your auth token <a class="header-anchor" href="#get-your-auth-token" aria-label="Permalink to &quot;Get your auth token&quot;">​</a></h3><p>Your auth token may be useful when you want to interact with your Celestia light node from a client application. You can get your auth token by running:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">celestia</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">light</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">auth</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">admin</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--p2p.network</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">mocha</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">celestia</span><span style="color:#24292E;"> </span><span style="color:#032F62;">light</span><span style="color:#24292E;"> </span><span style="color:#032F62;">auth</span><span style="color:#24292E;"> </span><span style="color:#032F62;">admin</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--p2p.network</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mocha</span></span></code></pre></div><p>Use <code>celestia light auth --help</code> to learn more about the available options.</p><h3 id="advanced-key-management-with-cel-key" tabindex="-1">Advanced Key management with <code>cel-key</code> <a class="header-anchor" href="#advanced-key-management-with-cel-key" aria-label="Permalink to &quot;Advanced Key management with `cel-key`&quot;">​</a></h3><p>For more advanced key management beyond the built-in capabilities of the light node, use the separate cel-key utility. This dedicated tool allows you to:</p><ul><li>Create, import, and manage keys.</li><li>Backup, verify and select the active key used by your node</li></ul><p>To utilize cel-key, you&#39;ll need to build it separately. Follow the instructions provided in the <a href="/how-to-guides/celestia-node">celestia-node</a> documentation.</p><p>Detailed instructions for backing up, recovering, and verifying node keys are available in the guide on <a href="/tutorials/celestia-node-key#managing-the-key-returned-by-celestia-state-account-address">Managing the key returned by <code>celestia state account-address</code></a>.</p><h2 id="troubleshooting" tabindex="-1">Troubleshooting <a class="header-anchor" href="#troubleshooting" aria-label="Permalink to &quot;Troubleshooting&quot;">​</a></h2><p>If you run into issues, check out the <a href="/how-to-guides/celestia-node-troubleshooting">troubleshooting</a> page for common problems and solutions.</p><h2 id="next-steps" tabindex="-1">Next steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to &quot;Next steps&quot;">​</a></h2><p>Check out the <a href="/how-to-guides/rollup-stacks">rollup stacks page</a> to get started learning about ways to build whatever with Celestia underneath.</p><p>Also, here are some suggested tutorials for you:</p><h3 id="rust-client-tutorial" tabindex="-1">Rust client tutorial <a class="header-anchor" href="#rust-client-tutorial" aria-label="Permalink to &quot;Rust client tutorial&quot;">​</a></h3><p>If you&#39;re interested in writing a Rust program to interact with your Celestia light node, check out the <a href="/tutorials/rust-client-tutorial">Rust client tutorial</a>.</p><h3 id="golang-client-tutorial" tabindex="-1">Golang client tutorial <a class="header-anchor" href="#golang-client-tutorial" aria-label="Permalink to &quot;Golang client tutorial&quot;">​</a></h3><p>If you&#39;re interested in writing a Golang program to interact with your Celestia light node, check out the <a href="/tutorials/golang-client-tutorial">Golang client tutorial</a>.</p><p>Head to the next page to learn about different node types for the consensus and DA networks.</p>',20))]))}});export{$ as __pageData,Q as default};
