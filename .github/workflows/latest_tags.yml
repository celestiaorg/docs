name: Latest Tags

on:
  workflow_dispatch:
    inputs:
      network:
        description: "Which network are we updating the latest tag information?"
        required: true
        type: choice
        options:
          - arabica
          - mocha
          - mainnet
          - all
      software:
        description: "Which software are we updating the latest tag information?"
        required: true
        type: choice
        options:
          - celestia-core
          - celestia-app
          - celestia-node
          - all

jobs:
  logLatestRelease:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repo: [celestia-app, celestia-core, celestia-node]
    env:
      owner: celestiaorg
    outputs:
      celestia-app_latest_tag: ${{ steps.set_outputs.outputs.celestia-app_latest_tag }}
      celestia-app_latest_sha: ${{ steps.set_outputs.outputs.celestia-app_latest_sha }}
      celestia-core_latest_tag: ${{ steps.set_outputs.outputs.celestia-core_latest_tag }}
      celestia-core_latest_sha: ${{ steps.set_outputs.outputs.celestia-core_latest_sha }}
      celestia-node_latest_tag: ${{ steps.set_outputs.outputs.celestia-node_latest_tag }}
      celestia-node_latest_sha: ${{ steps.set_outputs.outputs.celestia-node_latest_sha }}
    steps:
      - name: Log target owner/repo
        run: "echo Pulling info from: '${{ env.owner }}/${{ matrix.repo }}'"

      - name: Query /releases endpoint
        uses: octokit/request-action@v2.x
        id: get_latest_release
        with:
          route: GET /repos/{owner}/{repo}/releases
          owner: ${{ env.owner }}
          repo: ${{ matrix.repo }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Log latest tag
        run: "echo latest tag: '${{ fromJSON(steps.get_latest_release.outputs.data)[0].tag_name }}'"

      - name: Query /git/ref/tag endpoint
        uses: octokit/request-action@v2.x
        id: get_latest_commit
        with:
          route: GET /repos/{owner}/{repo}/git/ref/tags/${{ fromJSON(steps.get_latest_release.outputs.data)[0].tag_name }}
          owner: ${{ env.owner }}
          repo: ${{ matrix.repo }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Log latest sha
        run: "echo latest commit: '${{ fromJSON(steps.get_latest_commit.outputs.data).object.sha }}'"

      - name: Set outputs
        id: set_outputs
        run: |
          echo "${{matrix.repo}}_latest_tag=${{ fromJSON(steps.get_latest_release.outputs.data)[0].tag_name }}" >> $GITHUB_OUTPUT
          echo "${{matrix.repo}}_latest_sha=${{ fromJSON(steps.get_latest_commit.outputs.data).object.sha }}" >> $GITHUB_OUTPUT

  createPR:
    needs: logLatestRelease
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v3

      - name: Dynamically update files based on conditions
        run: |
          networks=("arabica" "mocha" "mainnet")
          softwares=("celestia-core" "celestia-app" "celestia-node")

          for network in "${networks[@]}"; do
            for software in "${softwares[@]}"; do
              if [[ ${{ github.event.inputs.network }} == "$network" || ${{ github.event.inputs.network }} == "all" ]]; then
                if [[ ${{ github.event.inputs.software }} == "$software" || ${{ github.event.inputs.software }} == "all" ]]; then
                  CONTENTS=$(cat << EOF
                  const ${software}${network}Versions = Object.freeze({
                    "${software}-latest-tag": "\${{ needs.logLatestRelease.outputs.${software}_latest_tag }}",
                    "${software}-latest-sha": "\${{ needs.logLatestRelease.outputs.${software}_latest_sha }}"
                  });
                  export default ${software}${network}Versions;
                  EOF
                  )
                  echo "$CONTENTS" > .vitepress/constants/${software}_${network}_versions.js
                fi
              fi
            done
          done

      - name: Install Prettier
        run: |
          npm install -g prettier

      - name: Format the code with Prettier
        run: |
          prettier .vitepress/constants/* --write

      - name: Open PR
        uses: peter-evans/create-pull-request@v4
        with:
          commit-message: "[automated GH action] update latest release tags & commit sha (${{ github.event.inputs.network }})"
          title: "[GH Action] Update release tags and commit SHAs for ${{ github.event.inputs.network }}"
          token: ${{ secrets.PAT_CREATE_PR }}