name: Latest Tags

on:
  workflow_dispatch:
    # Inputs the workflow accepts. These are the options visible when manually
    # triggering the workflow
    inputs:
      # `network` is the name of the input and is customizable. We can name it
      # whatever we want. Just note that if we change the name here we will need
      # to change the name where it is referenced
      network:
        # Friendly description to be shown in the UI instead of 'network'
        description: "Which network are we updating the latest tag information?"
        # Input has to be provided for the workflow to run
        required: true
        type: choice
        # These are the drop down options, so we can add other networks, like
        # mainnet for instance.
        options:
          - arabica
          - mocha
          - coffee
          - all
      software:
        description: "Which software are we updating the latest tag information?"
        required: true
        type: choice
        options:
          - celestia-core
          - celestia-app
          - celestia-node
          - all

jobs:
  # This job pulls the latest tag information for the repos listed in the matrix
  # strategy
  logLatestRelease:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # If we want more repos, we can just add them here.
        repo: [celestia-app, celestia-core, celestia-node]
        network: ['arabica', 'mocha', 'coffee']
    env:
      # This workflow is set for the celestiaorg github org, if we need other
      # orgs we will need to restructure this workflow
      owner: celestiaorg
    # Define the outputs for other steps to access
    outputs:
      celestia-app_latest_tag: ${{ steps.set_outputs.outputs.celestia-app_latest_tag }}
      celestia-app_latest_sha: ${{ steps.set_outputs.outputs.celestia-app_latest_sha }}
      celestia-core_latest_tag: ${{ steps.set_outputs.outputs.celestia-core_latest_tag }}
      celestia-core_latest_sha: ${{ steps.set_outputs.outputs.celestia-core_latest_sha }}
      celestia-node_latest_tag: ${{ steps.set_outputs.outputs.celestia-node_latest_tag }}
      celestia-node_latest_sha: ${{ steps.set_outputs.outputs.celestia-node_latest_sha }}
    steps:
      - name: Log target owner/repo
        run: "echo Pulling info from: '${{ env.owner }}/${{ matrix.repo }}'"

      - name: Query /releases endpoint
        uses: octokit/request-action@v2.x
        id: get_latest_release
        with:
          route: GET /repos/{owner}/{repo}/releases
          owner: ${{ env.owner }}
          repo: ${{ matrix.repo }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Log latest tag
        run: "echo latest tag: '${{ fromJSON(steps.get_latest_release.outputs.data)[0].tag_name }}'"

      - name: Query /git/ref/tag endpoint
        uses: octokit/request-action@v2.x
        id: get_latest_commit
        with:
          route: GET /repos/{owner}/{repo}/git/ref/tags/${{ fromJSON(steps.get_latest_release.outputs.data)[0].tag_name }}
          owner: ${{ env.owner }}
          repo: ${{ matrix.repo }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Log latest sha
        run: "echo latest commit: '${{ fromJSON(steps.get_latest_commit.outputs.data).object.sha }}'"

      - name: Set outputs
        id: set_outputs
        run: |
          echo "${{matrix.repo}}_latest_tag=${{ fromJSON(steps.get_latest_release.outputs.data)[0].tag_name }}" >> $GITHUB_OUTPUT
          echo "${{matrix.repo}}_latest_sha=${{ fromJSON(steps.get_latest_commit.outputs.data).object.sha }}" >> $GITHUB_OUTPUT

  # This job creates a PR if there were changes. The changes are created when
  # the workflow writes to the version files. This means that the workflow
  # should be able to be run and will just be a no-op if the is no new release.
  # Either way, since a PR is created, this job won't break the docs on main.
  createPR:
    needs: logLatestRelease
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v3
      - name: Write latest tags and commit SHAs to txt files
        run: |
          # Define the networks and software in arrays
          networks=("arabica" "mocha" "mainnet")
          software=("celestia-app" "celestia-core" "celestia-node")
      
          # Loop over each network and software
          for network in "${networks[@]}"; do
            for soft in "${software[@]}"; do
              # Check if the current network and software match the inputs, or if "all" was selected
              if [[ "${{ github.event.inputs.network }}" == "$network" || "${{ github.event.inputs.network }}" == "all" ]]; then
                if [[ "${{ github.event.inputs.software }}" == "$soft" || "${{ github.event.inputs.software }}" == "all" ]]; then
                  # Get the latest tag and sha using jq
                  latest_tag=$(echo '${{ toJson(needs.logLatestRelease.outputs) }}' | jq -r .${soft}_latest_tag)
                  latest_sha=$(echo '${{ toJson(needs.logLatestRelease.outputs) }}' | jq -r .${soft}_latest_sha)
      
                  # Write to the appropriate file
                  CONTENTS=$(cat << EOF
                  const ${soft}${network}Versions = Object.freeze({
                    "${soft}-latest-tag": "$latest_tag",
                    "${soft}-latest-sha": "$latest_sha",
                  });
                  export default ${soft}${network}Versions;
                  EOF
                  )
                  echo $CONTENTS > docs/constants/${soft}_${network}_versions.js
                fi
              fi
            done
          done
      - name: Install Prettier
        run: |
          npm install -g prettier
      - name: Format the code with Prettier
        run: |
          prettier .vitepress/constants/\${{ inputs.network }}_versions.js --write
      - name: Open PR
        uses: peter-evans/create-pull-request@v4
        with:
          # This github action has a lot of options, currently we just tweak the
          # commit-message and title of the PR.
          commit-message: "[automated GH action] update latest release tags & commit sha (${{ inputs.network }})"
          title: "[GH Action] Update release tags and commit SHAs for ${{ inputs.network }}"
          token: ${{ secrets.PAT_CREATE_PR }}