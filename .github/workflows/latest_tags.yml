name: Latest Tags

on:
  workflow_dispatch:
    inputs:
      network:
        description: "Which network are we updating the latest tag information?"
        required: true
        type: choice
        options:
          - arabica
          - mocha
          - mainnet
          - all
      software:
        description: "Which software are we updating the latest tag information?"
        required: true
        type: choice
        options:
          - celestia-core
          - celestia-app
          - celestia-node
          - all

jobs:
  set_matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          MATRIX="{\"include\": ["
          IFS=', ' read -r -a array <<< "${{ github.event.inputs.software }}"
          for element in "${array[@]}"
          do
            MATRIX="${MATRIX}{\"repo\": \"${element}\"},"
          done
          MATRIX="${MATRIX%?}]}"
          echo "MATRIX=${MATRIX}" >> $GITHUB_ENV

  logLatestRelease:
    needs: set_matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.set_matrix.outputs.matrix)}}
    env:
      owner: celestiaorg
    outputs:
      celestia-app_latest_tag: ${{ steps.set_outputs.outputs.celestia-app_latest_tag }}
      celestia-app_latest_sha: ${{ steps.set_outputs.outputs.celestia-app_latest_sha }}
      celestia-core_latest_tag: ${{ steps.set_outputs.outputs.celestia-core_latest_tag }}
      celestia-core_latest_sha: ${{ steps.set_outputs.outputs.celestia-core_latest_sha }}
      celestia-node_latest_tag: ${{ steps.set_outputs.outputs.celestia-node_latest_tag }}
      celestia-node_latest_sha: ${{ steps.set_outputs.outputs.celestia-node_latest_sha }}
    steps:
      - name: Log target owner/repo
        run: "echo Pulling info from: '${{ env.owner }}/${{ matrix.repo }}'"
      - name: Query /releases endpoint
        uses: octokit/request-action@v2.x
        id: get_latest_release
        with:
          route: GET /repos/${{ env.owner }}/${{ matrix.repo }}/releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Log latest tag
        run: "echo latest tag: '${{ fromJSON(steps.get_latest_release.outputs.data)[0].tag_name }}'"
      - name: Query /git/ref/tag endpoint
        uses: octokit/request-action@v2.x
        id: get_latest_commit
        with:
          route: GET /repos/${{ env.owner }}/${{ matrix.repo }}/git/ref/tags/${{ fromJSON(steps.get_latest_release.outputs.data)[0].tag_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Log latest sha
        run: "echo latest commit: '${{ fromJSON(steps.get_latest_commit.outputs.data).object.sha }}'"
      - name: Set outputs
        id: set_outputs
        run: |
          echo "${{matrix.repo}}_latest_tag=${{ fromJSON(steps.get_latest_release.outputs.data)[0].tag_name }}" >> $GITHUB_ENV
          echo "${{matrix.repo}}_latest_sha=${{ fromJSON(steps.get_latest_commit.outputs.data).object.sha }}" >> $GITHUB_ENV

  createPR:
    needs: logLatestRelease
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v3
      - name: Write Core Arabica
        if: |
          (github.event.inputs.network == 'arabica' || github.event.inputs.network == 'all') &&
          (needs.logLatestRelease.outputs.celestia-core_latest_tag != '')
        run: |
          CONTENTS=$(cat << EOF
          const celestiaCoreArabicaVersions = Object.freeze({
            "core-latest-tag": "${{ needs.logLatestRelease.outputs.celestia-core_latest_tag }}",
            "core-latest-sha": "${{ needs.logLatestRelease.outputs.celestia-core_latest_sha }}", 
          });
          export default celestiaCoreArabicaVersions;
          EOF
          )
          echo $CONTENTS > .vitepress/constants/celestia-core_arabica_versions.js
      - name: Write Core Mocha
        if: |
          (github.event.inputs.network == 'arabica' || github.event.inputs.network == 'all') &&
          (needs.logLatestRelease.outputs.celestia-core_latest_tag != '')
        run: |
          CONTENTS=$(cat << EOF
          const celestiaCoreMochaVersions = Object.freeze({
            "core-latest-tag": "${{ needs.logLatestRelease.outputs.celestia-core_latest_tag }}",
            "core-latest-sha": "${{ needs.logLatestRelease.outputs.celestia-core_latest_sha }}", 
          });
          export default celestiaCoreMochaVersions;
          EOF
          )
          echo $CONTENTS > .vitepress/constants/celestia-core_mocha_versions.js
      - name: Write App Arabica
        if: |
          (github.event.inputs.network == 'arabica' || github.event.inputs.network == 'all') &&
          (needs.logLatestRelease.outputs.celestia-app_latest_tag != '')
        run: |
          CONTENTS=$(cat << EOF
          const celestiaAppArabicaVersions = Object.freeze({
            "app-latest-tag": "${{ needs.logLatestRelease.outputs.celestia-app_latest_tag }}",
            "app-latest-sha": "${{ needs.logLatestRelease.outputs.celestia-app_latest_sha }}", 
          });
          export default celestiaAppArabicaVersions;
          EOF
          )
          echo $CONTENTS > .vitepress/constants/celestia-app_arabica_versions.js
      - name: Write App Mocha
        if: |
          (github.event.inputs.network == 'mocha' || github.event.inputs.network == 'all') &&
          (needs.logLatestRelease.outputs.celestia-app_latest_tag != '')
        run: |
          CONTENTS=$(cat << EOF
          const celestiaAppMochaVersions = Object.freeze({
            "app-latest-tag": "${{ needs.logLatestRelease.outputs.celestia-app_latest_tag }}",
            "app-latest-sha": "${{ needs.logLatestRelease.outputs.celestia-app_latest_sha }}", 
          });
          export default celestiaAppMochaVersions;
          EOF
          )
          echo $CONTENTS > .vitepress/constants/celestia-app_mocha_versions.js
      - name: Write Node Arabica
        if: |
          (github.event.inputs.network == 'arabica' || github.event.inputs.network == 'all') &&
          (needs.logLatestRelease.outputs.celestia-node_latest_tag != '')
        run: |
          CONTENTS=$(cat << EOF
          const celestiaNodeArabicaVersions = Object.freeze({
            "node-latest-tag": "${{ needs.logLatestRelease.outputs.celestia-node_latest_tag }}",
            "node-latest-sha": "${{ needs.logLatestRelease.outputs.celestia-node_latest_sha }}", 
          });
          export default celestiaNodeArabicaVersions;
          EOF
          )
          echo $CONTENTS > .vitepress/constants/celestia-node_arabica_versions.js
      - name: Write Node Mocha
        if: |
          (github.event.inputs.network == 'mocha' || github.event.inputs.network == 'all') &&
          (needs.logLatestRelease.outputs.celestia-node_latest_tag != '')
        run: |
          CONTENTS=$(cat << EOF
          const celestiaNodeMochaVersions = Object.freeze({
            "node-latest-tag": "${{ needs.logLatestRelease.outputs.celestia-node_latest_tag }}",
            "node-latest-sha": "${{ needs.logLatestRelease.outputs.celestia-node_latest_sha }}", 
          });
          export default celestiaNodeMochaVersions;
          EOF
          )
          echo $CONTENTS > .vitepress/constants/celestia-node_mocha_versions.js
      - name: Install Prettier
        run: |
          npm install -g prettier
      - name: Format the code with Prettier
        run: |
          prettier .vitepress/constants/celestia-core_arabica_versions.js --write
      - name: Open PR
        uses: peter-evans/create-pull-request@v4
        with:
          commit-message: "[automated GH action] update latest release tags & commit sha (${{ github.event.inputs.network }})"
          title: "[GH Action] Update release tags and commit SHAs for ${{ github.event.inputs.network }}"
          token: ${{ secrets.PAT_CREATE_PR }}